<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>FlexGrid Introduction</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- styles -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="styles/app.css" />

    <!-- jQuery and Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.0.0.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" alt="Wijmo 5" />
            <h1>FlexGrid 101</h1>
            <p>
                This page shows how to get started with Wijmo's FlexGrid control.
            </p>
        </div>
    </div>
    <div class="container">

        <!-- getting started -->
        <div>
            <h2>Getting Started</h2>
            <p>
                Steps for getting started with FlexGrid in JavaScript applications:
            </p>
            <ol>
                <li>Add references to Wijmo.</li>
                <li>Add markup to serve as the Wijmo control's host.</li>
                <li>Initialize the Wijmo control(s) via JavaScript.</li>
                <li>(Optional) Add some CSS to customize the FlexGrid control's appearance.</li>
            </ol>
            <p>
                This will create a FlexGrid with default behavior, which includes 
                automatic column generation, column sorting and reordering, editing, 
                and clipboard support.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#gsCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
  &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.grid.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

  &lt;!-- this is the grid --&gt;
  &lt;div id="gsFlexGrid"&gt;&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
var countries = 'US,Germany,UK,Japan,Italy,Greece'.split(',');
var data = [];
for (var i = 0; i &lt; count; i++) {
  data.push({
    id: i,
    country: countries[i % countries.length],
    date: new Date(2014, i % 12, i % 28),
    amount: Math.random() * 10000,
    active: i % 4 === 0
  });
}

// create the grid and give it some data
var grid = new wijmo.grid.FlexGrid('#gsFlexGrid');
grid.itemsSource = data;
                            </div>
                            <div class="tab-pane pane-content" id="gsCss">
/* set default grid style */
.wj-flexgrid {
  height: 300px;
  background-color: white;
  box-shadow: 4px 4px 10px 0px rgba(50, 50, 50, 0.75);
  margin-bottom: 12px;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="gsFlexGrid"></div>
                </div>
            </div>
        </div>

        <!-- column definitions -->
        <div>
            <h2>Column Definitions</h2>
            <p>
                The Getting Started example did not define any columns, so FlexGrid generated them
                automatically.
            </p>
            <p>
                This example shows how you can define the columns using the FlexGrid's <b>initialize</b> method
                and <b>columns</b> collection directly.
            </p>
            <p>
                Specifying the columns allows you to choose which columns to show, and in what order.
                This also gives you control over each column&#39;s width, heading, formatting, alignment,
                and other properties.
            </p>
            <p>
                In this case, we use star sizing to set the width of the "Country" column. This tells the 
                column to stretch to fill the available width of the grid so there is no empty space.  On 
                the "Revenue" column, we set the format property to "n0", which results in numbers with 
                thousand separators and no decimal digits.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#cdHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#cdJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="cdHtml">
&lt;b&gt;Initialize Method&lt;/b&gt;
&lt;div id="cdInitMethod"&gt;&lt;/div&gt;

&lt;b&gt;Column Definitions&lt;/b&gt;
&lt;div id="cdColsCollection"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="cdJs">
// create two grids and some data
var fgInitMethod = new wijmo.grid.FlexGrid('#cdInitMethod'),
    fgColsCollection = new wijmo.grid.FlexGrid('#cdColsCollection'),
    cv = new wijmo.collections.CollectionView(data.getData(100));

// initialize one grid using 'initialize' method
fgInitMethod.initialize({
  autoGenerateColumns: false,
  columns: [
    { header: 'Country', binding: 'country', width: '*' },
    { header: 'Date', binding: 'date' },
    { header: 'Revenue', binding: 'amount', format: 'n0' },
    { header: 'Active', binding: 'active' },
  ],
  itemsSource: cv
});

// initialize the other grid using the columns collection
fgColsCollection.autoGenerateColumns = false;
fgColsCollection.itemsSource = cv;

var c = new wijmo.grid.Column();
c.binding = 'country';
c.header = 'Country';
c.width = '*';
fgColsCollection.columns.push(c);

c = new wijmo.grid.Column();
c.binding = 'date';
c.header = 'Date';
fgColsCollection.columns.push(c);

c = new wijmo.grid.Column();
c.binding = 'amount';
c.header = 'Revenue';
c.format = 'n0';
fgColsCollection.columns.push(c);

c = new wijmo.grid.Column();
c.binding = 'active';
c.header = 'Active';
fgColsCollection.columns.push(c);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <b>Initialize Method</b>
                    <div id="cdInitMethod"></div>

                    <b>Columns Collection</b>
                    <div id="cdColsCollection"></div>
                </div>
            </div>
        </div>

        <!-- selection modes -->
        <div>
            <h2>Selection Modes</h2>
            <p>
                By default, FlexGrid allows you to select a range of cells with the mouse or keyboard,
                just like Excel. The <b>selectionMode</b> property allows you to change that so that you
                can select a row, a range of rows, non-contiguous rows (like in a list-box), a single cell,
                or disable selection altogether.
            </p>
            <p>
                This example allows you to pick the <b>selectionMode</b> from a Wijmo Menu control.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#smHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#smJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="smHtml">
&lt;div id="smFlexGrid"&gt;&lt;/div&gt;
&lt;select id="smMenu"&gt;
  &lt;option value="None"&gt;None&lt;/option&gt;
  &lt;option value="Cell"&gt;Cell&lt;/option&gt;
  &lt;option value="CellRange" selected&gt;CellRange&lt;/option&gt;
  &lt;option value="Row"&gt;Row&lt;/option&gt;
  &lt;option value="RowRange"&gt;RowRange&lt;/option&gt;
  &lt;option value="ListBox"&gt;ListBox&lt;/option&gt;
&lt;/select&gt;
                            </div>
                            <div class="tab-pane pane-content" id="smJs">
// initialize grid and menu
var grid = new wijmo.grid.FlexGrid('#smFlexGrid'),
  menu = new wijmo.input.Menu('#smMenu'),
  cv = new wijmo.collections.CollectionView(data.getData(100));

grid.itemsSource = cv;
updateMenuHeader();

// update grid selection mode when an item is selected from the menu
menu.itemClicked.addHandler(function (sender) {
  grid.selectionMode = sender.selectedValue;
  updateMenuHeader();
});

// update menu header to show current selection mode
function updateMenuHeader() {
  menu.header = '&lt;b&gt;Selection Mode:&lt;/b&gt; ' + menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="smFlexGrid"></div>
                    <select id="smMenu">
                        <option value="None">None</option>
                        <option value="Cell">Cell</option>
                        <option value="CellRange" selected>CellRange</option>
                        <option value="Row">Row</option>
                        <option value="RowRange">RowRange</option>
                        <option value="ListBox">ListBox</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- editing -->
        <div>
            <h2>Editing</h2>
            <p>
                FlexGrid has built-in support for fast, in-cell editing like you find in Excel. There is no
                need to add extra columns with Edit buttons that switch between display and edit modes.
            </p>
            <p>
                Users can start editing by typing into any cell. This puts the cell in quick-edit mode.
                In this mode, pressing a cursor key finishes the editing and moves the selection to a different cell.
            </p>
            <p>
                Another way to start editing is by pressing F2 or by clicking a cell twice. This puts the cell in
                full-edit mode. In this mode, pressing a cursor key moves the caret within the cell text.
                To finish editing and move to another cell, the user must press the Enter, Tab, or Escape key.
            </p>
            <p>
                Data is automatically coerced to the proper type when editing finishes. If the user enters invalid
                data, the edit is cancelled and the original data remains in place.
            </p>
            <p>
                You can disable editing at the grid, column, or row levels using the <b>isReadOnly</b> property of the
                grid, column, or row objects. In this example, we make the ID column read-only.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#eHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#eJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="eHtml">
&lt;div id="eFlexGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="eJs">
// create and initialize grid (editing is enabled by default)
var grid = new wijmo.grid.FlexGrid('#eFlexGrid', {
  autoGenerateColumns: false,
  columns: [
    { header: 'ID', binding: 'id', width: '*', isReadOnly: true },  // cannot edit
    { header: 'Country', binding: 'country' },
    { header: 'Date', binding: 'date' },
    { header: 'Revenue', binding: 'amount', format: 'n0' },
    { header: 'Active', binding: 'active' },
  ],
  itemsSource: data.getData(100)
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="eFlexGrid"></div>
                </div>
            </div>
        </div>

        <!-- grouping -->
        <div>
            <h2>
                Grouping
            </h2>
            <p>
                FlexGrid supports grouping through the <b>ICollectionView</b> interface, which is identical to the
                one in .NET. To enable grouping, add one or more <b>GroupDescription</b> objects to the
                <b>CollectionView.groupDescriptions</b> property, and ensure that the grid's <b>showGroups</b> property
                is set to true (the default value).
            </p>
            <p>
                <b>GroupDescription</b> objects are flexible, allowing you to group data based on value or on grouping
                functions. The example below groups dates by year; amounts by range returning three ranges: over 5,000,
                500 to 5,000, and under 500; and anything else by value. Use the menu to see the effects of each grouping.
            </p>
            <p>
                Notice that the "Revenue" column displays the totals in the group rows. We do this by
                setting the column's <b>aggregate</b> property to "Sum." The aggregate is automatically
                updated when you edit the values in the column.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gHtml">
&lt;div id="gFlexGrid"&gt;&lt;/div&gt;
&lt;select id="gMenu"&gt;
  &lt;option value="" selected&gt;(no grouping)&lt;/option&gt;
  &lt;option value="country"&gt;Country&lt;/option&gt;
  &lt;option value="amount"&gt;Revenue&lt;/option&gt;
  &lt;option value="date"&gt;Date&lt;/option&gt;
  &lt;option value="country,date"&gt;Country and Date&lt;/option&gt;
  &lt;option value="country,amount"&gt;Country and Revenue&lt;/option&gt;
  &lt;option value="country,date,amount"&gt;Country, Date, and Revenue&lt;/option&gt;
&lt;/select&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gJs">
// initialize grid and menu
var grid = new wijmo.grid.FlexGrid('#gFlexGrid'),
  menu = new wijmo.input.Menu('#gMenu'),
  cv = new wijmo.collections.CollectionView(data.getData(100));

grid.initialize({
  autoGenerateColumns: false,
  columns: [
    { header: 'Country', binding: 'country', width: '*' },
    { header: 'Date', binding: 'date' },
    { header: 'Revenue', binding: 'amount', format: 'n0' }
  ],
  itemsSource: cv
});
updateMenuHeader();

// handle the Menu control's selectedIndexChanged event
menu.itemClicked.addHandler(function (sender) {
  var groupBy = sender.selectedValue;
  cv.groupDescriptions.clear();
  if (groupBy) {
    var groupNames = groupBy.split(',');
    for (var i = 0; i &lt; groupNames.length; i++) {
      var groupName = groupNames[i];
      if (groupName == 'date') { // group dates by year
        var groupDesc = new wijmo.collections.PropertyGroupDescription(groupName, function (item, prop) {
          return item.date.getFullYear();
        });
        cv.groupDescriptions.push(groupDesc);
      }
      else if (groupName == 'amount') { // group amounts in ranges
        var groupDesc = new wijmo.collections.PropertyGroupDescription(groupName, function (item, prop) {
          return item.amount &gt;= 5000 ? '&gt; 5,000' : item.amount &gt;= 500 ? '500 to 5,000' : '&lt; 500';
        });
        cv.groupDescriptions.push(groupDesc);
      }
      else { // group everything else by value
        var groupDesc = new wijmo.collections.PropertyGroupDescription(groupName);
        cv.groupDescriptions.push(groupDesc);
      }
    }
  }
  updateMenuHeader();
});

// show currently selected item
function updateMenuHeader() {
  menu.header = '&lt;b&gt;Group By:&lt;/b&gt; ' + menu.text;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="gFlexGrid"></div>
                    <select id="gMenu">
                        <option value="" selected>(no grouping)</option>
                        <option value="country">Country</option>
                        <option value="amount">Revenue</option>
                        <option value="date">Date</option>
                        <option value="country,date">Country and Date</option>
                        <option value="country,amount">Country and Revenue</option>
                        <option value="country,date,amount">Country, Date, and Revenue</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- filtering -->
        <div>
            <h2>Filtering</h2>
            <p>
                The FlexGrid supports filtering through the <b>ICollectionView</b> interface, which is identical to the
                one in .NET. To enable filtering, set the <b>CollectionView.filter</b> property to a function that
                determines which objects to include in the view.
            </p>
            <p>
                In this example, we create a filter for the country, and get the filter value from the input control.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#fHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#fJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="fHtml">
&lt;div id="fFlexGrid"&gt;&lt;/div&gt;
&lt;div class="input-group"&gt;
  &lt;span class="input-group-addon"&gt;
    &lt;i class="glyphicon glyphicon-filter"&gt;&lt;/i&gt;
  &lt;/span&gt;
  &lt;input
    id="fFilter"
    type="text"
    class="form-control"
    placeholder="Filter by Country..." /&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="fJs">
// create grid, some data
var grid = new wijmo.grid.FlexGrid('#fFlexGrid'),
    cv = new wijmo.collections.CollectionView(data.getData(100)),
    filterEl = document.getElementById('fFilter'),
    filterText = '';

// populate the grid with data
grid.itemsSource = cv;

// update grid when filter changes
filterEl.addEventListener('input', function () {
  filterText = this.value.toLowerCase();
  cv.refresh();
});

// CollectionView filter
cv.filter = function (item) {
  return !filterText || item.country.toLowerCase().indexOf(filterText) > -1;
};
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="fFlexGrid"></div>
                    <div class="input-group">
                        <span class="input-group-addon">
                            <i class="glyphicon glyphicon-filter"></i>
                        </span>
                        <input id="fFilter" type="text" class="form-control" placeholder="Filter by Country..." />
                    </div>
                </div>
            </div>
        </div>

        <!-- paging -->
        <div>
            <h2>Paging</h2>
            <p>
                The FlexGrid supports paging through the <b>IPagedCollectionView</b> interface, which is nearly identical
                to the one in .NET. To enable paging, set the <b>IPagedCollectionView.pageSize</b> property to the number
                of items you want on each page, and provide a UI for navigating the pages.
            </p>
            <p>
                In this example, we use JavaScript to show 10 items per page. We add navigation buttons, and call
                IPagedCollectionView methods when a button is clicked. Note that we use the <strong>pageIndex</strong>
                and <strong>pageCount</strong> properties to show the current page and total number of pages.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#pHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#pJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="pHtml">
&lt;div id="pFlexGrid" style="height:auto"&gt;&lt;/div&gt;
&lt;div class="btn-group" id="pPager"&gt;
  &lt;button type="button" class="btn btn-default" data-action="fast-backward" id="pfb"&gt;
    &lt;span class="glyphicon glyphicon-fast-backward"&gt;&lt;/span&gt;
  &lt;/button&gt;
  &lt;button type="button" class="btn btn-default" data-action="step-backward" id="psb"&gt;
    &lt;span class="glyphicon glyphicon-step-backward"&gt;&lt;/span&gt;
  &lt;/button&gt;
  &lt;button type="button" class="btn btn-default" disabled style="width:100px" data-action="none" id="pn"&gt;&lt;/button&gt;
  &lt;button type="button" class="btn btn-default" data-action="step-forward" id="psf"&gt;
    &lt;span class="glyphicon glyphicon-step-forward"&gt;&lt;/span&gt;
  &lt;/button&gt;
  &lt;button type="button" class="btn btn-default" data-action="fast-forward" id="pff"&gt;
    &lt;span class="glyphicon glyphicon-fast-forward"&gt;&lt;/span&gt;
  &lt;/button&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="pJs">
// create a CollectionView, set the page size to 10, initialize pager
var cv = new wijmo.collections.CollectionView(data.getData(100)),
    pagerButtons = Array.prototype.slice.call(document.querySelectorAll('#pPager button'));

cv.pageSize = 10; // set collectionView's pageSize
updatePager();

// show the data in a grid
var grid = new wijmo.grid.FlexGrid('#pFlexGrid');
grid.itemsSource = cv;

// update pager when user clicks a button
pagerButtons.forEach(function(el) {
  el.addEventListener('click', function () {
    updatePager(this.getAttribute('data-action'));
  });
});

// disable/enable buttons and update display text for pager
function updatePager(action) {

  // get buttons by id
  var display = document.getElementById('pn'),
      fb = document.getElementById('pfb'), sb = document.getElementById('psb'),
      sf = document.getElementById('psf'), ff = document.getElementById('pff'),
      enableBackwards = false,
      enableForwards = false;

  // handle pager operation based on button's attribute
  switch (action) {
    case 'fast-backward':
      cv.moveToFirstPage();
      break;
    case 'step-backward':
      cv.moveToPreviousPage();
      break;
    case 'step-forward':
      cv.moveToNextPage();
      break;
    case 'fast-forward':
      cv.moveToLastPage();
      break;
  }

  // update the pager text
  display.innerHTML = (cv.pageIndex + 1) + ' / ' + (cv.pageCount);

  // determine which pager buttons to enable/disable
  enableBackwards = cv.pageIndex &lt;= 0;
  enableForwards = cv.pageIndex &gt;= cv.pageCount - 1;

  // enable/disable pager buttons
  fb.disabled = enableBackwards;
  sb.disabled = enableBackwards;
  sf.disabled = enableForwards;
  ff.disabled = enableForwards;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="pFlexGrid" style="height:auto"></div>
                    <div class="btn-group" id="pPager">
                        <button type="button" class="btn btn-default" data-action="fast-backward" id="pfb">
                            <span class="glyphicon glyphicon-fast-backward"></span>
                        </button>
                        <button type="button" class="btn btn-default" data-action="step-backward" id="psb">
                            <span class="glyphicon glyphicon-step-backward"></span>
                        </button>
                        <button type="button" class="btn btn-default" disabled style="width:100px" data-action="none" id="pn"></button>
                        <button type="button" class="btn btn-default" data-action="step-forward" id="psf">
                            <span class="glyphicon glyphicon-step-forward"></span>
                        </button>
                        <button type="button" class="btn btn-default" data-action="fast-forward" id="pff">
                            <span class="glyphicon glyphicon-fast-forward"></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- master-detail -->
        <div>
            <h2>Master-Detail</h2>
            <p>
                The <b>ICollectionView</b> interface has built-in support for currency, which enables you to
                implement master-detail scenarios with FlexGrid. You can refer to the <b>currentItem</b> and
                use it as a binding source for any elements on the page.
            </p>
            <p>
                Note that you have to update the details view when the current item changes.
                To do that, attach a handler to the <b>ICollectionView.currentChanged</b>
                event and update the details view as needed.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#mdHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#mdJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="mdHtml">
&lt;div id="mdFlexGrid"&gt;&lt;/div&gt;
&lt;dl class="dl-horizontal"&gt;
  &lt;dt&gt;ID&lt;/dt&gt;
  &lt;dd id="mdCurId"&gt;&lt;/dd&gt;
  &lt;dt&gt;Country&lt;/dt&gt;
  &lt;dd id="mdCurCountry"&gt;&lt;/dd&gt;
  &lt;dt&gt;Date&lt;/dt&gt;
  &lt;dd id="mdCurDate"&gt;&lt;/dd&gt;
  &lt;dt&gt;Revenue&lt;/dt&gt;
  &lt;dd id="mdCurRevenue"&gt;&lt;/dd&gt;
  &lt;dt&gt;Active&lt;/dt&gt;
  &lt;dd id="mdCurActive"&gt;&lt;/dd&gt;
&lt;/dl&gt;
                            </div>
                            <div class="tab-pane pane-content" id="mdJs">
// create a CollectionView to keep track of selection
var cv = new wijmo.collections.CollectionView(data.getData(100));

// initialize details pane
updateDetails();

// update details when current item changes
cv.currentChanged.addHandler(function (sender, args) {
  updateDetails();
});

// create a grid to show/edit the data
var grid = new wijmo.grid.FlexGrid('#mdFlexGrid', {
  autoGenerateColumns: false,
  columns: [
    { header: 'Country', binding: 'country', width: '*' },
    { header: 'Date', binding: 'date' }
  ],
  itemsSource: cv
});

// update the details when the CollectionView's currentItem changes
function updateDetails() {
  var item = cv.currentItem;
  document.getElementById('mdCurId').innerHTML = item.id;
  document.getElementById('mdCurCountry').innerHTML = item.country;
  document.getElementById('mdCurDate').innerHTML = wijmo.Globalize.format(item.date, 'd');
  document.getElementById('mdCurRevenue').innerHTML = wijmo.Globalize.format(item.amount, 'c');
  document.getElementById('mdCurActive').innerHTML = item.active;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="mdFlexGrid"></div>
                    <dl class="dl-horizontal">
                        <dt>ID</dt>
                        <dd id="mdCurId"></dd>
                        <dt>Country</dt>
                        <dd id="mdCurCountry"></dd>
                        <dt>Date</dt>
                        <dd id="mdCurDate"></dd>
                        <dt>Revenue</dt>
                        <dd id="mdCurRevenue"></dd>
                        <dt>Active</dt>
                        <dd id="mdCurActive"></dd>
                    </dl>
                </div>
            </div>
        </div>

        <!-- conditional styling -->
        <div>
            <h2>Conditional Styling</h2>
            <p>
                FlexGrid has an <b>itemFormatter</b> property that gives you complete control over
                the contents of the cells.
            </p>
            <p>
                This example uses a JavaScript function to create value ranges that return named
                colors. We then call this function in the FlexGrid's <b>itemFormatter</b> and pass the cell's data
                in order to conditionally set the cell's foreground color.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#csHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#csJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="csHtml">
&lt;div id="csFlexGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="csJs">
// create grid, some data
var grid = new wijmo.grid.FlexGrid('#csFlexGrid'),
  cv = new wijmo.collections.CollectionView(data.getData(100));

// initialize grid
grid.initialize({
  autoGenerateColumns: false,
  columns: [
    { header: 'Country', binding: 'country', width: '*', isContentHtml: true, isReadOnly: true },
    { header: 'Date', binding: 'date' },
    { header: 'Revenue', binding: 'amount', format: 'n0' },
    { header: 'Active', binding: 'active' },
  ],
  itemsSource: cv,
  itemFormatter: function (panel, r, c, cell) {

    // validate CellType and if correct column
    if (wijmo.grid.CellType.Cell == panel.cellType &&
      panel.columns[c].binding == 'amount') {

      // get the cell's data
      var cellData = panel.getCellData(r, c);

      // set cell's foreground color
      cell.style.color = getAmountColor(cellData);
    }
  }
});

// get the color used to display an amount
function getAmountColor(amount) {
   return amount &lt; 500 ? 'red' : amount &lt; 2500 ? 'black' : 'green';
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="csFlexGrid"></div>
                </div>
            </div>
        </div>

        <!-- themes -->
        <div>
            <h2>Themes</h2>
            <p>
                The appearance of the FlexGrid is defined in CSS. In addition to the default theme, we
                include about a dozen professionally designed themes that customize the appearance of
                all Wijmo controls to achieve a consistent, attractive look.
            </p>
            <p>
                You can customize the appearance of the grid using CSS. To do this, copy CSS rules
                from the default theme to a new CSS file and modify the style attributes you want to change.
            </p>
            <p>
                In this example, we add a "custom-flex-grid" class to the grid element and define some
                CSS rules to create a simple "black and white, no borders" theme for any grids that
                have the "custom-flex-grid" class.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#tHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#tJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#tCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="tHtml">
&lt;div id="tFlexGrid" class="custom-flex-grid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="tJs">
var grid = new wijmo.grid.FlexGrid('#tFlexGrid');
grid.itemsSource = data.getData(100);
                            </div>
                            <div class="tab-pane pane-content" id="tCss">
.custom-flex-grid .wj-header.wj-cell {
  color: #fff;
  background-color: #000;
  border-bottom: solid 1px #404040;
  border-right: solid 1px #404040;
  font-weight: bold;
}

.custom-flex-grid .wj-cell {
  background-color: #fff;
  border: none;
}

.custom-flex-grid .wj-alt:not(.wj-state-selected):not(.wj-state-multi-selected) {
  background-color: #fff;
}

.custom-flex-grid .wj-state-selected {
  background: #000;
  color: #fff;
}

.custom-flex-grid .wj-state-multi-selected {
  background: #222;
  color: #fff;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tFlexGrid" class="custom-flex-grid"></div>
                </div>
            </div>
        </div>

        <!-- trees/hierarchical data -->
        <div>
            <h2>Trees and Hierarchical Data</h2>
            <p>
                In addition to grouping, FlexGrid supports hierarchical data, that is, data with items
                that have lists of subitems. This type of hierarchical structure is very common, and is
                usually displayed in a tree-view control.
            </p>
            <p>
                To use FlexGrid with hierarchical data sources, set the <b>childItemsPath</b> property
                to the name of the data element that contains the child elements. The grid automatically
                scans the data and builds the tree for you.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#tvHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#tvJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#tvCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="tvHtml">
&lt;div id="tvFlexGrid" class="custom-flex-grid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="tvJs">
// create the grid
var grid = new wijmo.grid.FlexGrid('#tvFlexGrid');

// populate the grid and set childItemsPath to show data hierarchically
grid.childItemsPath = 'items';

// initialize the grid to show hierarchical data
grid.initialize({
  autoGenerateColumns: false,
  columns: [
    { binding: 'name', width: '*' },
    { binding: 'length', width: 80, align: 'center' }
  ],
  itemsSource: data.treeData,                             // hierarchical data
  childItemsPath: 'items',                                // set hierarchy path
  allowResizing: wijmo.grid.AllowResizing.None,           // disable resizing
  headersVisibility: wijmo.grid.HeadersVisibility.None,   // hide headers
  selectionMode: wijmo.grid.SelectionMode.ListBox         // use ListBox selection
});
                            </div>
                            <div class="tab-pane pane-content" id="tvCss">
.custom-flex-grid .wj-header.wj-cell {
  color: #fff;
  background-color: #000;
  border-bottom: solid 1px #404040;
  border-right: solid 1px #404040;
  font-weight: bold;
}

.custom-flex-grid .wj-cell {
  background-color: #fff;
  border: none;
}

.custom-flex-grid .wj-alt:not(.wj-state-selected):not(.wj-state-multi-selected) {
  background-color: #fff;
}

.custom-flex-grid .wj-state-selected {
  background: #000;
  color: #fff;
}

.custom-flex-grid .wj-state-multi-selected {
  background: #222;
  color: #fff;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="tvFlexGrid" class="custom-flex-grid"></div>
                </div>
            </div>
        </div>

        <!-- handling null values -->
        <div>
            <h2>Handling null values</h2>
            <p>
                By default, FlexGrid allows you to enter empty values in columns of type string,
                and will not allow empty/null values in columns of any other type.
            </p>
            <p>
                You can change this behavior using the <b>required</b> property on grid columns.
                If you set the <b>required</b> property to false, the grid will allow you to 
                enter empty values in that column, regardless of type. Conversely, if you set
                the <b>required</b> property to true, the grid will not allow empty values 
                even in string columns.</p>
            <p>
                Setting <b>required</b> to null reverts to the default behavior (nulls allowed
                only in string columns).</p>
            <p>
                The grid below reverts the default behavior. It sets <b>required</b> to false
                for the first column, and to true for all others. You can delete content that
                is not required by entering an empty string or simply by pressing the delete
                key.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#nvHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#nvJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="nvHtml">
&lt;div id="nvGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="nvJs">
// create a grid and define the columns
new wijmo.grid.FlexGrid('#nvGrid', {
    autoGenerateColumns: false,
    itemsSource: data.getData(100),
    columns: [
        { header: 'Country', binding: 'country', width: '*', required: true },
        { header: 'Date', binding: 'date', required: false },
        { header: 'Revenue', binding: 'amount', format: 'n0', required: false },
        { header: 'Active', binding: 'active', required: false }
    ]
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="nvGrid"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- sample scripts -->
    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/gettingStarted.js" type="text/javascript"></script>
    <script src="scripts/columnDefinitions.js" type="text/javascript"></script>
    <script src="scripts/selectionModes.js" type="text/javascript"></script>
    <script src="scripts/editing.js" type="text/javascript"></script>
    <script src="scripts/grouping.js" type="text/javascript"></script>
    <script src="scripts/filtering.js" type="text/javascript"></script>
    <script src="scripts/paging.js" type="text/javascript"></script>
    <script src="scripts/masterDetail.js" type="text/javascript"></script>
    <script src="scripts/conditionalStyling.js" type="text/javascript"></script>
    <script src="scripts/themes.js" type="text/javascript"></script>
    <script src="scripts/hierarchicalData.js" type="text/javascript"></script>
    <script src="scripts/nullValues.js" type="text/javascript"></script>

    <!-- Google analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-208280-14', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>