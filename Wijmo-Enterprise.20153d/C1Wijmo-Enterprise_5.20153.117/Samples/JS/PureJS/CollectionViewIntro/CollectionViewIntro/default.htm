<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>CollectionView Introduction</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- styles -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="styles/app.css" />

    <!-- jQuery and Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.0.0.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" />
            <h1>CollectionView 101</h1>
            <p>
                This page shows how to get started with Wijmo's CollectionView class.
            </p>
        </div>
    </div>
    <div class="container">

        <!-- Introduction -->
        <div>
            <p>
                Wijmo has a solid infrastructure based on a powerful and familiar data layer.
                The main data binding interface is <b>ICollectionView</b>. Wijmo includes several classes that implement <b>ICollectionView</b>.
                The most basic is <b>CollectionView</b>, which uses regular JavaScript arrays
                as data sources.
            <p>
                The <b>CollectionView</b> class implements the following interfaces:
            </p>
            <ul>
                <li><b>ICollectionView</b>: provides current record management, custom sorting, filtering, and grouping.</li>
                <li><b>IEditableCollectionView</b>: provides methods for editing, adding, and removing items.</li>
                <li><b>IPagedCollectionView</b>: provides paging.</li>
            </ul>
            <p>The <b>CollectionView</b> class can keep track of changes made to the data. This feature is useful in situations where you must submit changes to the server.</p>
        </div>

        <!-- getting started -->
        <div>
            <h2>Getting Started</h2>
            <p>
			    To use the <b>CollectionView</b> class, start by declaring it and passing a regular array as a data source. Then, access the view using the items property.</p>
            <p>
                Here the collection will be shown in FlexGrid.
            </p>
            <p>
                Steps for getting started with CollectionView class in applications:
            </p>
            <ol>
                <li>Add references to Wijmo.</li>
                <li>Add markup to serve as the FlexGrid's host.</li>
                <li>Initialize the CollectionView instance and the FlexGrid instance(s) via Javascript.</li>
                <li>(Optional) Add some CSS to customize the grid's appearance.</li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#gsCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.grid.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="gsGrid"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
// create collectionview, grid
var cvGettingStarted = new wijmo.collections.CollectionView(getData(10)),
    gsGrid = new wijmo.grid.FlexGrid('#gsGrid', {
      itemsSource: cvGettingStarted
    });
                            </div>
                            <div class="tab-pane pane-content" id="gsCss">
/* set default grid style */
.wj-flexgrid {
  height: 300px;
  background-color: white;
  box-shadow: 4px 4px 10px 0px rgba(50, 50, 50, 0.75);
  margin-bottom: 12px;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="gsGrid"></div>
                </div>
            </div>
        </div>

        <!-- current record management -->
        <div>
            <h2>Current Record Management</h2>
            <p>
                As implementing the interface <b>ICollectionView</b>, <b>CollectionView</b> can manage the current record. 
            </p>
            <p>
                This example shows how you can manage the current record through APIs provided by the <b>CollectionView</b> class. 
            </p>
            <p>
                In this case, we use the properties <b>currentPosition</b> to obtain the current record position in the collection. 
                We also use the methods <b>moveCurrentTo(item)</b>, <b>moveCurrentToFirst()</b>, <b>moveCurrentToLast()</b>, <b>moveCurrentToNext()</b>, <b>moveCurrentToPosition(index)</b> and <b>moveCurrentToPrevious()</b> to change the current position.
                When the current is changed, we use the events <b>currentChanging</b> and <b>currentChanged</b> to track it. We can cancel the current changing in the event <b>currentChanging</b>.
            </p>
            <p>
                Notes: Click the "Move To Next" button to move the current to the next one. Click the "Move to Previous" to move the current to the previous on. Clicking the "Stop in 4th Row" button will cause the current is forbidden to be changed when it locates in the 4th row. Then clicking the "Clear Stopping" button will let the current be changed freely.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#crmHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#crmJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="crmHtml">
&lt;div class="row-fluid well btn-group"&gt;
  &lt;button class="btn btn-default" id="btnCRMMoveNext"&gt;Move To Next&lt;/button&gt;
  &lt;button class="btn btn-default" id="btnCRMMovePre"&gt;Move To Previous&lt;/button&gt;
  &lt;button class="btn btn-default" id="btnCRMStop4"&gt;Stop in 4th Row&lt;/button&gt;
  &lt;button class="btn btn-default" id="btnCRMReset"&gt;Clear Stopping&lt;/button&gt;
&lt;/div&gt;
&lt;div id="crmGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="crmJs">
// create collectionview, grid
var cvCRM = new wijmo.collections.CollectionView(getData(10)),
    crmGrid = new wijmo.grid.FlexGrid('#crmGrid');

// initialize grid
crmGrid.initialize({
  isReadOnly: true,
  selectionMode: wijmo.grid.SelectionMode.Row,
  itemsSource: cvCRM
});

// Add the processes for buttons' click
// move the current to the next one
document.getElementById('btnCRMMoveNext').addEventListener('click', function () {
  cvCRM.moveCurrentToNext();
});

// move the current to the preivous one
document.getElementById('btnCRMMovePre').addEventListener('click', function () {
  cvCRM.moveCurrentToPrevious();
});

// when the current item is the 4th one, forbid changing current.
document.getElementById('btnCRMStop4').addEventListener('click', function () {
  cvCRM.currentChanging.addHandler(stopCurrentIn4th);
});

// restore to be able to change current.
document.getElementById('btnCRMReset').addEventListener('click', function () {
  cvCRM.currentChanging.removeHandler(stopCurrentIn4th);
});

// define the funciton to forbid the current moving.
function stopCurrentIn4th(sender, e) {
  // when the current is the 4rd item, stop moving.
  if (sender.currentPosition === 3) {
    e.cancel = true;
  }
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="row-fluid well btn-group">
                        <button class="btn btn-default" id="btnCRMMoveNext">Move To Next</button>
                        <button class="btn btn-default" id="btnCRMMovePre">Move To Previous</button>
                        <button class="btn btn-default" id="btnCRMStop4">Stop in 4th Row</button>
                        <button class="btn btn-default" id="btnCRMReset">Clear Stopping</button>
                    </div>
                    <div id="crmGrid"></div>
                </div>
            </div>
        </div>

        <!-- sorting -->
        <div>
            <h2>
                Sorting
            </h2>
            <p>
                The <b>CollectionView</b> class supports sorting through the <b>ICollectionView</b> interface, which is identical to the
                one in .NET. To enable sorting, add one or more <b>sortDescriptions</b> objects to the
                <b>CollectionView.sortDescriptions</b> property. Then the sorted result can be obtained from the <b>CollectionView.items</b> property.
            </p>
            <p>
                <b>SortDescription</b> objects are flexible, allowing you to sort data based on value in ascending or descending order.
                In the sample below, you can sort the collection based on the corresponding field value choosed in the first list. You can also specify the sorting order in the second list.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#sHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#sJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="sHtml">
&lt;div class="row-fluid well row"&gt;
  &lt;div class="col-md-8"&gt;
    &lt;select id="sortingFieldNameList" class="form-control"&gt;
    &lt;/select&gt;
  &lt;/div&gt;
  &lt;div class="col-md-4"&gt;
    &lt;select id="sortingOrderList" class="form-control"&gt;
      &lt;option value="true" selected="selected"&gt;Ascending&lt;/option&gt;
      &lt;option value="false"&gt;Descending&lt;/option&gt;
    &lt;/select&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="sortingGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="sJs">
// create collectionview, grid, the jQuery elements, the field name list.
var cvSorting = new wijmo.collections.CollectionView(getData(10)),
    sortingGrid = new wijmo.grid.FlexGrid('#sortingGrid'),
    sortingFieldNameList = document.getElementById('sortingFieldNameList'),
    sortingOrderList = document.getElementById('sortingOrderList'),
    sortingNames = getNames();

// initialize grid
sortingGrid.initialize({
  isReadOnly: true,
  allowSorting: false,
  itemsSource: cvSorting
});

// initialize the list items for field names and orders.
sortingFieldNameList.innerHTML += '&lt;option value="" selected="selected"&gt;Please choose the field you want to sort by...&lt;/option&gt;';
for (var i = 0; i &lt; sortingNames.length; i++) {
  sortingFieldNameList.innerHTML += '&lt;option value="' + sortingNames[i] + '"&gt;' + sortingNames[i] + '&lt;/option&gt;';
}

// track the list change in order to udpate the sortDescriptions property.
sortingFieldNameList.addEventListener('change', sortGrid);
sortingOrderList.addEventListener('change', sortGrid);

function sortGrid() {
  var fieldName = sortingFieldNameList.value,
      ascending = sortingOrderList.value,
      sd, sdNew;

  if (!fieldName) {
    return;
  }

  ascending = ascending === 'true';
  sd = cvSorting.sortDescriptions;
  sdNew = new wijmo.collections.SortDescription(fieldName, ascending);

  // remove any old sort descriptors and add the new one
  sd.splice(0, sd.length, sdNew);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <!-- commands -->
                    <div class="row-fluid well row">
                        <div class="col-md-8">
                            <select id="sortingFieldNameList" class="form-control">
                            </select>
                        </div>
                        <div class="col-md-4">
                            <select id="sortingOrderList" class="form-control">
                                <option value="true" selected="selected">Ascending</option>
                                <option value="false">Descending</option>
                            </select>
                        </div>
                    </div>
                    <div id="sortingGrid"></div>
                </div>
            </div>
        </div>

        <!-- filtering -->
        <div>
            <h2>Filtering</h2>
            <p>
                The <b>CollectionView</b> class supports filtering through the <b>ICollectionView</b> interface, which is identical to the
                one in .NET. To enable filtering, set the <b>CollectionView.filter</b> property to a function that
                determines which objects to be included in the view.
            </p>
            <p>
                In this example, we create a filter for the country, and get the filter value from the input control. When you input the filter, the grid will be refreshed and render the fitlered data.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#fHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#fJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="fHtml">
&lt;div class="row-fluid well"&gt;
  &lt;input id="filteringInput" type="text" class="form-control app-pad" placeholder="Please input the character you want filter by country(case-insensitive)" /&gt;
&lt;/div&gt;
&lt;div id="fileringGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="fJs">
// create collectionview, grid, filter with timeout, textbox for inputting filter.
var cvFiltering = new wijmo.collections.CollectionView(getData(20)),
    filteringGrid = new wijmo.grid.FlexGrid('#filteringGrid'),
    toFilter,
    filteringInput = document.getElementById('filteringInput');

// initialize grid
filteringGrid.initialize({
  isReadOnly: true,
  itemsSource: cvFiltering
});

// apply filter when input
filteringInput.addEventListener('input', filterGrid);

// define the filter function for the collection view.
function filterFunction(item) {
  var filter = filteringInput.value.toLowerCase();
  if (!filter) {
    return true;
  }

  return item.country.toLowerCase().indexOf(filter) &gt; -1;
}

// apply filter (applied on a 500 ms timeOut)
function filterGrid() {
  if (toFilter) {
    clearTimeout(toFilter);
  }

  toFilter = setTimeout(function () {
    toFilter = null;
    if (cvFiltering.filter === filterFunction) {
      cvFiltering.refresh();
    }
    else {
      cvFiltering.filter = filterFunction;
    }
  }, 500);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="row-fluid well">
                        <input id="filteringInput" type="text" class="form-control app-pad" placeholder="Please input the character you want filter by country(case-insensitive)" />
                    </div>
                    <div id="filteringGrid"></div>
                </div>
            </div>
        </div>

        <!-- grouping -->
        <div>
            <h2>
                Grouping
            </h2>
            <p>
                The <b>CollectionView</b> class supports grouping through the <b>ICollectionView</b> interface, which is identical to the
                one in .NET. To enable grouping, add one or more <b>GroupDescription</b> objects to the
                <b>CollectionView.groupDescriptions</b> property, and ensure that the grid's <b>showGroups</b> property
                is set to true when creating the grid instance(the default value is false.).
            </p>
            <p>
                <b>GroupDescription</b> objects are flexible, allowing you to group data based on value or on grouping
                functions.
            </p>
            <p>
                The example below groups the collection by the field which you select from the list.
                The grid shows not only the items content but also the group information: the group name and the average value of amount in the group.
                You can find the rendering codes for these in the method initTBody. The corresponding code snippet locates in line 116.
            </p>
            <p>Notes: Selecting one item in the list will add a new instance of GroupDescription. If the groupdescription already exists, nothing happens.
                In order to clear the group setting, select the first item in the list.</p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gHtml">
&lt;div class="row-fluid well"&gt;
  &lt;select id="groupingFieldNameList" class="form-control"&gt;&lt;/select&gt;
&lt;/div&gt;
&lt;div id="groupingGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gJs">
// create collectionview, grid, the select element and the names list.
var cvGrouping = new wijmo.collections.CollectionView(getData(20)),
    groupingGrid = new wijmo.grid.FlexGrid('#groupingGrid'),
    groupingFieldNameList = document.getElementById('groupingFieldNameList'),
    groupingNames = getNames();

// initialize grid
groupingGrid.initialize({
  isReadOnly: true,
  itemsSource: cvGrouping
});

// initialize the list and listen to the list's change.
groupingFieldNameList.innerHTML += '&lt;option value="" selected="selected"&gt;Please choose the field you want to group by...&lt;/option&gt;';
for (var i = 0; i &lt; groupingNames.length; i++) {
  groupingFieldNameList.innerHTML += '&lt;option value="' + groupingNames[i] + '"&gt;' + groupingNames[i] + '&lt;/option&gt;';
}
groupingFieldNameList.addEventListener('change', groupGrid);

// update the group settings.
function groupGrid() {
  var gd,
      fieldName = groupingFieldNameList.value;

  gd = cvGrouping.groupDescriptions;

  if (!fieldName) {
    // clear all the group settings.
    gd.splice(0, gd.length);
    return;
  }

  if (findGroup(fieldName) &gt;= 0) {
    return;
  }

  if (fieldName === 'amount') {
    // when grouping by amount, use ranges instead of specific values
    gd.push(new wijmo.collections.PropertyGroupDescription(fieldName, function (item, propName) {
      var value = item[propName]; // amount
      if (value &gt; 1000) return 'Large Amounts';
      if (value &gt; 100) return 'Medium Amounts';
      if (value &gt; 0) return 'Small Amounts';
      return 'Negative Amounts';
    }));
  }
  else {
    // group by specific property values
    gd.push(new wijmo.collections.PropertyGroupDescription(fieldName));
  }
}

// check whether the group with the specified property name already exists.
function findGroup(propName) {
  var gd = cvGrouping.groupDescriptions;
  for (var i = 0; i &lt; gd.length; i++) {
    if (gd[i].propertyName === propName) {
      return i;
    }
  }

  return -1;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <!-- commands -->
                    <div class="row-fluid well">
                        <select id="groupingFieldNameList" class="form-control">
                        </select>
                    </div>
                    <div id="groupingGrid"></div>
                </div>
            </div>
        </div>

        <!-- editing -->
        <div>
            <h2>Editing</h2>
            <p>
                As implementing the interface <b>IEditableCollectionView</b>, the <b>CollectionView</b> class supports editing.
            </p>
            <p>
                This sample shows how you can update, add and remove the specified item in the collection.
            </p>
            <p>
                In this sample, you can select the row in the grid and press the Edit Detail... button to start editing. 
                After finishing editing in the popup dialog, press the OK button to commit your updating.
                If you want to add a new record to the collection, press the Add... button and customize the item content in the popup dialog. 
                Then press the OK button to commit your adding.
                If you don't want to update/add the record, just press the Cancel button in the dialog.
                Select the row and press the Delete button will let you remove the record from the collection.
            </p>
            <p>
                After updating, adding and removing, the grid will be refreshed according to the tracked item array.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#eHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#eJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="eHtml">
&lt;div id="editingGrid"&gt;&lt;/div&gt;
&lt;!-- commands --&gt;
&lt;div class="row-fluid well grid-sort-group"&gt;
  &lt;!-- edit details in a popup --&gt;
  &lt;button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail" id="btnEdit"&gt;
    Edit Detail...
  &lt;/button&gt;
  &lt;button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail" id="btnAdd"&gt;
    Add...
  &lt;/button&gt;
  &lt;button class="btn btn-default" id="btnDelete"&gt;
    Delete
  &lt;/button&gt;
&lt;/div&gt;
&lt;!-- a dialog for editing item details --&gt;
&lt;div class="modal fade" id="dlgDetail"&gt;
  &lt;div class="modal-dialog"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;
          &amp;times;
        &lt;/button&gt;
        &lt;h4 class="modal-title"&gt;Edit Item&lt;/h4&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        &lt;dl class="dl-horizontal"&gt;
          &lt;dt&gt;ID&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtID" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Start Date&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtStart" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;End Start&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtEnd" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Country&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtCountry" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Product&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtProduct" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Color&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtColor" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Amount&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtAmount" type="text" /&gt;
          &lt;/dd&gt;
          &lt;dt&gt;Active&lt;/dt&gt;
          &lt;dd&gt;
            &lt;input class="form-control" id="edtActive" type="checkbox" /&gt;
          &lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
      &lt;div class="modal-footer"&gt;
        &lt;button type="button" class="btn btn-primary" data-dismiss="modal" id="btnCRUDOK"&gt;
          OK
        &lt;/button&gt;
        &lt;button type="button" class="btn btn-warning" data-dismiss="modal" id="btnCRUDCancel"&gt;
          Cancel
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="eJs">// create collectionview, grid
// create collectionview, grid
var cvEditing = new wijmo.collections.CollectionView(getData(10)),
    editingGrid = new wijmo.grid.FlexGrid('#editingGrid');

// initialize grid
editingGrid.initialize({
  selectionMode: wijmo.grid.SelectionMode.Row,
  itemsSource: cvEditing
});

// track the collection changes so that updating the grid.
cvEditing.trackChanges = true;

// define the new item value.
cvEditing.newItemCreator = function () {
  var item = getData(1)[0];

  // aggregate the max value of id in the collection.
  item.id = wijmo.getAggregate(wijmo.Aggregate.Max, cvEditing.sourceCollection, 'id') + 1;
  return item;
};

// Add the processes for buttons' click
document.getElementById('btnEdit').addEventListener('click', function () {
  cvEditing.editItem(cvEditing.currentItem);

  // update the content in the dialog with the current edited item.
  updateDialog(cvEditing.currentEditItem, true);
});

document.getElementById('btnAdd').addEventListener('click', function () {
  var newItem = cvEditing.addNew();

  // update the content in the dialog with the current added item
  updateDialog(newItem, false);
});

document.getElementById('btnDelete').addEventListener('click', function () {
  var position = cvEditing.currentPosition;
  cvEditing.remove(cvEditing.currentItem);
});

// commit editing or adding
document.getElementById('btnCRUDOK').addEventListener('click', function () {
  // update the editing/adding item with the returned data from dialog.
  var updatedItem = getUpdatedData(),
      cItem = cvEditing.currentEditItem,
      names = getNames();

  if (!cItem) {
    cItem = cvEditing.currentAddItem;
  }
  if (!cItem) {
    return;
  }
  for (var i = 0; i &lt; names.length; i++) {
    var fName = names[i];
    cItem[fName] = updatedItem[fName];
  }

  // commit editing/adding
  cvEditing.commitEdit();
  cvEditing.commitNew();
});

// cancel editing or adding
document.getElementById('btnCRUDCancel').addEventListener('click', function () {
  cvEditing.cancelEdit();
  cvEditing.cancelNew();
});

// fill the dialog with the item.
function updateDialog(item, isEdit) {
  document.getElementById('edtID').value = item.id !== null &amp;&amp; typeof (item.id) != 'undefined' ? wijmo.Globalize.format(item.id) : '';
  document.getElementById('edtStart').value = item.start ? wijmo.Globalize.format(item.start) : '';
  document.getElementById('edtEnd').value = item.end ? wijmo.Globalize.format(item.end) : '';
  document.getElementById('edtCountry').value = item.country ? item.country : '';
  document.getElementById('edtProduct').value = item.product ? item.product : '';
  document.getElementById('edtColor').value = item.color ? item.color : '';
  document.getElementById('edtAmount').value = item.amount !== null &amp;&amp; typeof item.amount != 'undefined' ? wijmo.Globalize.format(item.amount) : '';
  document.getElementById('edtActive').checked = item.active;

  var title = document.getElementById('dlgDetail').querySelector('div.modal-header h4.modal-title');
  title.innerHTML = isEdit ? 'Edit Item' : 'Add Item';
}

// get the content from the dialog
function getUpdatedData() {
  var item = {},
      content = document.getElementById('edtID').value;

  if (content) {
    item.id = wijmo.Globalize.parseInt(content);
  }

  content = document.getElementById('edtStart').value;
  if (content) {
    item.start = wijmo.Globalize.parseDate(content);
  }

  content = document.getElementById('edtEnd').value;
  if (content) {
    item.end = wijmo.Globalize.parseDate(content);
  }

  item.country = document.getElementById('edtCountry').value;
  item.product = document.getElementById('edtProduct').value;
  item.color = document.getElementById('edtColor').value;

  content = document.getElementById('edtAmount').value;
  if (content) {
    item.amount = wijmo.Globalize.parseFloat(content);
  }

  item.active = document.getElementById('edtActive').checked;

  return item;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div id="editingGrid"></div>
                    <!-- commands -->
                    <div class="row-fluid well">
                        <!-- edit details in a popup -->
                        <button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail" id="btnEdit">
                            Edit Detail...
                        </button>
                        <button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail" id="btnAdd">
                            Add...
                        </button>
                        <button class="btn btn-default" id="btnDelete">
                            Delete
                        </button>
                    </div>
                    <!-- a dialog for editing item details -->
                    <div class="modal fade" id="dlgDetail">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                        &times;
                                    </button>
                                    <h4 class="modal-title">Edit Item</h4>
                                </div>
                                <div class="modal-body">
                                    <dl class="dl-horizontal">
                                        <dt>ID</dt>
                                        <dd>
                                            <input class="form-control" id="edtID" type="text" />
                                        </dd>
                                        <dt>Start Date</dt>
                                        <dd>
                                            <input class="form-control" id="edtStart" type="text" />
                                        </dd>
                                        <dt>End Start</dt>
                                        <dd>
                                            <input class="form-control" id="edtEnd" type="text" />
                                        </dd>
                                        <dt>Country</dt>
                                        <dd>
                                            <input class="form-control" id="edtCountry" type="text" />
                                        </dd>
                                        <dt>Product</dt>
                                        <dd>
                                            <input class="form-control" id="edtProduct" type="text" />
                                        </dd>
                                        <dt>Color</dt>
                                        <dd>
                                            <input class="form-control" id="edtColor" type="text" />
                                        </dd>
                                        <dt>Amount</dt>
                                        <dd>
                                            <input class="form-control" id="edtAmount" type="text" />
                                        </dd>
                                        <dt>Active</dt>
                                        <dd>
                                            <input class="form-control" id="edtActive" type="checkbox" />
                                        </dd>
                                    </dl>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-primary" data-dismiss="modal" id="btnCRUDOK">
                                        OK
                                    </button>
                                    <button type="button" class="btn btn-warning" data-dismiss="modal" id="btnCRUDCancel">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- paging -->
        <div>
            <h2>Paging</h2>
            <p>
                The <b>CollectionView</b> class supports paging through the <b>IPagedCollectionView</b> interface, which is nearly identical
                to the one in .NET. To enable paging, set the <b>IPagedCollectionView.pageSize</b> property to the number
                of items you want on each page, and provide a UI for navigating the pages.
            </p>
            <p>
                In this example, we use JavaScript to show 10 items per page. You can customize it in the text box. We add navigation buttons, and call
                IPagedCollectionView methods in the button click. Note that we use the <strong>pageIndex</strong>
                and <strong>pageCount</strong> properties to show the current page and total number of pages.
                You can customize the page size in the first text box. Let it empty or 0 to make CollectionView no paging. Then the navigation buttons will be invisible.
            </p>

            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#pHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#pJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="pHtml">
&lt;div class="row-fluid well row"&gt;
  &lt;div class="col-md-5"&gt;
    &lt;input id="pagingInput" type="text" class="form-control" placeholder="0 or empty is for no paging." /&gt;
  &lt;/div&gt;
  &lt;div class="btn-group col-md-7" id="naviagtionPage"&gt;
    &lt;button type="button" class="btn btn-default" id="btnMoveToFirstPage"&gt;
      &lt;span class="glyphicon glyphicon-fast-backward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" id="btnMoveToPreviousPage"&gt;
      &lt;span class="glyphicon glyphicon-step-backward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" disabled style="width:100px" id="btnCurrentPage"&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" id="btnMoveToNextPage"&gt;
      &lt;span class="glyphicon glyphicon-step-forward"&gt;&lt;/span&gt;
    &lt;/button&gt;
    &lt;button type="button" class="btn btn-default" id="btnMoveToLastPage"&gt;
      &lt;span class="glyphicon glyphicon-fast-forward"&gt;&lt;/span&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="pagingGrid"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="pJs">
// create collectionview, grid, the navigation buttons' elements
var cvPaging = new wijmo.collections.CollectionView(getData(55)),
    pagingGrid = new wijmo.grid.FlexGrid('#pagingGrid'),
    btnFirstPage = document.getElementById('btnMoveToFirstPage'),
    btnPreviousPage = document.getElementById('btnMoveToPreviousPage'),
    btnNextPage = document.getElementById('btnMoveToNextPage'),
    btnLastPage = document.getElementById('btnMoveToLastPage'),
    btnCurrentPage = document.getElementById('btnCurrentPage');

// initialize grid
pagingGrid.initialize({
  isReadOnly: true,
  itemsSource: cvPaging
});

// initialize the page size with 10.
cvPaging.pageSize = 10;

// initialize the input value.
document.getElementById('pagingInput').value = cvPaging.pageSize;

// init the button status.
updateNaviagteButtons();

// update the collectionview's pagesize according to the user's input.
document.getElementById('pagingInput').addEventListener('blur', function () {
  var pagesize = this.value;

  if (!pagesize) {
    pagesize = 0;
  } else {
    pagesize = wijmo.Globalize.parseInt(pagesize);
  }

  cvPaging.pageSize = pagesize;
  updateNaviagteButtons();
});

// update the navigation buttons' status
function updateNaviagteButtons() {
  if (cvPaging.pageSize &lt;= 0) {
    document.getElementById('naviagtionPage').style.display = 'none';
    return;
  }

  document.getElementById('naviagtionPage').style.display = 'block';

  if (cvPaging.pageIndex === 0) {
    btnFirstPage.setAttribute('disabled', 'disabled');
    btnPreviousPage.setAttribute('disabled', 'disabled');
    btnNextPage.removeAttribute('disabled');
    btnLastPage.removeAttribute('disabled');
  } else if (cvPaging.pageIndex === (cvPaging.pageCount - 1)) {
    btnFirstPage.removeAttribute('disabled');
    btnPreviousPage.removeAttribute('disabled');
    btnLastPage.setAttribute('disabled', 'disabled');
    btnNextPage.setAttribute('disabled', 'disabled');
  } else {
    btnFirstPage.removeAttribute('disabled');
    btnPreviousPage.removeAttribute('disabled');
    btnNextPage.removeAttribute('disabled');
    btnLastPage.removeAttribute('disabled');
  }

  btnCurrentPage.innerHTML = (cvPaging.pageIndex + 1) + ' / ' + cvPaging.pageCount;
}

// commands: moving page.
btnFirstPage.addEventListener('click', function () {
  // move to the first page.
  cvPaging.moveToFirstPage();
  updateNaviagteButtons();
});

btnPreviousPage.addEventListener('click', function () {
  // move to the previous page.
  cvPaging.moveToPreviousPage();
  updateNaviagteButtons();
});

btnNextPage.addEventListener('click', function () {
  // move to the next page.
  cvPaging.moveToNextPage();
  updateNaviagteButtons();
});

btnLastPage.addEventListener('click', function () {
  // move to the last page.
  cvPaging.moveToLastPage();
  updateNaviagteButtons();
});
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="row-fluid well row">
                        <div class="col-md-5">
                            <input id="pagingInput" type="text" class="form-control" placeholder="0 or empty is for no paging." />
                        </div>
                        <div class="btn-group col-md-7" id="naviagtionPage">
                            <button type="button" class="btn btn-default" id="btnMoveToFirstPage">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default" id="btnMoveToPreviousPage">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default" disabled style="width:100px" id="btnCurrentPage">
                            </button>
                            <button type="button" class="btn btn-default" id="btnMoveToNextPage">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default" id="btnMoveToLastPage">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                    <div id="pagingGrid"></div>
                </div>
            </div>
        </div>

        <!-- tracking changes -->
        <div>
            <h2>Tracking changes</h2>
            <p>The <b>CollectionView</b> class can keep track of changes made to the 
            data. It is useful in situations where you must submit changes
            to the server. To turn on change tracking, set the <b>trackChanges</b>
            property to true. Once you do that, the <b>CollectionView</b> keeps 
            track of any changes made to the data and exposes them in three
            arrays:</p>
            <ul>
                <li><b>itemsEdited</b>: This list contains items that are edited using 
                    the <b>beginEdit</b> and <b>commitEdit</b> methods.</li>
                <li><b>itemsAdded</b>: This list contains items that are added using the 
                    <b>addNew</b> and <b>commitNew</b> methods.</li>
                <li><b>itemsRemoved</b>: This list contains items that are removed using 
                    the <b>remove</b> method.</li>
            </ul>
            <p>
                This feature is demonstrated below using a <b>FlexGrid</b>. The grid is bound
                to a <b>CollectionView</b> with <b>trackChanges</b> set to true.</p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#tcHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#tcJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="tcHtml">
&lt;h5&gt;Change the data here&lt;/h5&gt;
&lt;div id="tcMainGrid"&gt;&lt;/div&gt;
&lt;h5&gt;See the changes here&lt;/h5&gt;
&lt;h6&gt;Items edited:&lt;/h6&gt;
&lt;div id="tcEditedGrid" style="height:100px"&gt;&lt;/div&gt;
&lt;h6&gt;Items added:&lt;/h6&gt;
&lt;div id="tcAddedGrid" style="height:100px"&gt;&lt;/div&gt;
&lt;h6&gt;Items removed:&lt;/h6&gt;
&lt;div id="tcRemovedGrid" style="height:100px"&gt;&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="tcJs">
// create collectionview, grids, the grid column layout
var cvTrackingChanges = new wijmo.collections.CollectionView(getData(6)),
    tcMainGrid = new wijmo.grid.FlexGrid('#tcMainGrid'), // the flexGrid to edit the data
    tcEditedGrid = new wijmo.grid.FlexGrid('#tcEditedGrid'), // the flexGrid to record the edited items
    tcAddedGrid = new wijmo.grid.FlexGrid('#tcAddedGrid'), // the flexGrid to record the added items
    tcRemovedGrid = new wijmo.grid.FlexGrid('#tcRemovedGrid'), // the flexGrid to record the removed items
    columnsDefinition = [
      { header: 'id', binding: 'id' },
      { header: 'start', binding: 'start' },
      { header: 'end', binding: 'end' },
      { header: 'country', binding: 'country' },
      { header: 'product', binding: 'product' },
      { header: 'color', binding: 'color' },
      { header: 'amount', binding: 'amount' },
      { header: 'active', binding: 'active' }
    ];

// initialize the grids
tcMainGrid.initialize({
  allowAddNew: true,
  allowDelete: true,
  itemsSource: cvTrackingChanges
});

tcEditedGrid.initialize({
  isReadOnly: true,
  autoGenerateColumns: false,
  columns: columnsDefinition,
  itemsSource: cvTrackingChanges.itemsEdited
});

tcAddedGrid.initialize({
  isReadOnly: true,
  autoGenerateColumns: false,
  columns: columnsDefinition,
  itemsSource: cvTrackingChanges.itemsAdded
});

tcRemovedGrid.initialize({
  isReadOnly: true,
  autoGenerateColumns: false,
  columns: columnsDefinition,
  itemsSource: cvTrackingChanges.itemsRemoved
});

// track changes of the collectionview
cvTrackingChanges.trackChanges = true;
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <h5>Change the data here</h5>
                    <div id="tcMainGrid"></div>
                    <h5>See the changes here</h5>
                    <h6>Items edited:</h6>
                    <div id="tcEditedGrid" class="tcGrid" style="height:100px"></div>
                    <h6>Items added:</h6>
                    <div id="tcAddedGrid" class="tcGrid" style="height:100px"></div>
                    <h6>Items removed:</h6>
                    <div id="tcRemovedGrid" class="tcGrid" style="height:100px"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- sample scripts -->
    <!-- data source script -->
    <script src="scripts/dataSvc.js" type="text/javascript"></script>
    <!-- getting started sample script -->
    <script src="scripts/gettingStarted.js" type="text/javascript"></script>
    <!-- current record management sample script -->
    <script src="scripts/curRecordManage.js" type="text/javascript"></script>
    <!-- sorting sample script -->
    <script src="scripts/sorting.js" type="text/javascript"></script>
    <!-- filtering sample script -->
    <script src="scripts/filtering.js" type="text/javascript"></script>
    <!-- grouping sample script -->
    <script src="scripts/grouping.js" type="text/javascript"></script>
    <!-- editing sample script -->
    <script src="scripts/editing.js" type="text/javascript"></script>
    <!-- paging sample script -->
    <script src="scripts/paging.js" type="text/javascript"></script>
    <!-- tracking changes sample script -->
    <script src="scripts/trackingChanges.js" type="text/javascript"></script>

    <!-- Google analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-208280-14', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>