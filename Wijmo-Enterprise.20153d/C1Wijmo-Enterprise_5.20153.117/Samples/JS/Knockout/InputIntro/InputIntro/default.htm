<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Input Introduction</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Third Party -->
    <script src="http://knockoutjs.com/downloads/knockout-3.2.0.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" />

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.knockout.min.js" type="text/javascript"></script>
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />

    <!-- app styles -->
    <link rel="stylesheet" href="styles/app.css" />
</head>
<body>

    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png" alt="Wijmo 5" />
            <h1>
                Input 101
            </h1>
            <p>
                This page shows how to get started with Wijmo's Input controls.</p>
        </div>
    </div>

    <div class="container">

        <!-- Getting Started -->
        <div>
            <h2>Getting Started</h2>
            <p>
                Steps for getting started with Input controls in KnockoutJS applications:
            </p>
            <ol>
                <li>Add references to KnockoutJS, Wijmo, and Wijmo's KnockoutJS bindings.</li>
                <li>Add a view model to provide data and logic.</li>
                <li>Add a Wijmo Input control to the page and bind it to your data.</li>
                <li>(Optional) Add some CSS to customize the input control's appearance.</li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
    &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
    &lt;link rel="stylesheet" href="styles/app.css" /&gt;
    &lt;script src="scripts/knockout.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/wijmo.knockout.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script src="scripts/bindings/appBindings.js"&gt;&lt;/script&gt;
    &lt;script src="scripts/app.js"&gt;&lt;/script&gt;
    &lt;script src="scripts/viewmodels/appVM.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;!-- this is the InputNumber binding --&gt;
    &lt;div data-bind="wjInputNumber: { value: price, format: 'n', step: .5 }"&gt;&lt;/div&gt;&lt;/body&gt;
&lt;/html&gt;
                                                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
// create and apply application view model
function viewModel1() {
    // value to bind to
    this.price = ko.observable(3.5);
    .............
};

(function () {
    ko.applyBindings(new viewModel1());
})();
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div data-bind="wjInputNumber: { value: price, format: 'n', step: .5 }"></div>
                </div>
            </div>
        </div>

        <!-- AutoComplete -->
        <div>
            <h2>AutoComplete</h2>
            <p>
                The AutoComplete control is an auto-complete control that allows you to filter its
                item list as you type, as well as select a value directly from its drop-down list.
            </p>
            <p>
                To use the AutoComplete control, you must minimally set the <b>itemsSource</b>
                property to an array of data in order to populate its item list. The AutoComplete
                control also offers several other properties to alter its behavior, such as the
                <b>cssMatch</b> property. The <b>cssMatch</b> property allows you to specify the CSS
                class that is used to highlight parts of the content that match your search terms.
            </p>
            <p>
                The example below uses an array of strings to populate the AutoComplete control's
                item list using the <b>itemsSource</b> property. To see a list of suggestions, type
                <b>"ab"</b> or <b>"za"</b> in the AutoComplete controls below.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;itemsSource Only&lt;/label&gt;
    &lt;div data-bind="wjAutoComplete: {itemsSource: countries}"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;itemsSource &amp; cssMatch&lt;/label&gt;
    &lt;div data-bind="wjAutoComplete: {
            itemsSource: countries,
            cssMatch: 'highlight'}"&gt;&lt;/div&gt;
&lt;/div&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'CSS'}">
                            <div class="pane-content">
 .highlight {
    background-color: #ff0;
    color: #000;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>itemsSource Only</label>
                        <div data-bind="wjAutoComplete: {itemsSource: countries}"></div>
                    </div>
                    <div class="app-input-group">
                        <label>itemsSource &amp; cssMatch</label>
                        <div data-bind="wjAutoComplete: {itemsSource: countries, cssMatch: 'highlight'}"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ComboBox -->
        <div>
            <h2>ComboBox</h2>
            <p>
                The ComboBox control is very similar to the AutoComplete control, but rather than
                providing a list of suggestions as you type, the ComboBox will automatically complete
                and select the entry as you type.
            </p>
            <p>
                Like the AutoComplete control, you must minimally set the ComboBox's <b>itemsSource</b>
                property to an array of data in order to populate its item list. You may also want to
                specify whether the ComboBox is editable via the <b>isEditable</b> property. The
                <b>isEditable</b> property determines whether or not a user can enter values that do
                not appear in the ComboBox's item list.
            </p>
            <p>
                The example below uses two ComboBoxes bound to the same data source as the AutoComplete
                control above. The first ComboBox's <b>isEditable</b> property is set to false, while the
                second ComboBox's <b>isEditable</b> property is set to true.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Non-Editable&lt;/label&gt;
    &lt;div data-bind="wjComboBox: {
            itemsSource: countries,
            isEditable: false}"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Editable&lt;/label&gt;
    &lt;div data-bind="wjComboBox: {
            itemsSource: countries,
            isEditable: true }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Non-Editable</label>
                        <div data-bind="wjComboBox: {
                            itemsSource: countries,
                            isEditable: false}">
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Editable</label>
                        <div data-bind="wjComboBox: {
                            itemsSource: countries,
                            isEditable: true }">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- InputDate and Calendar -->
        <div>
            <h2>InputDate &amp; Calendar</h2>
            <p>
                The InputDate control allows you to edit and select dates via a drop-down calendar,
                preventing you from entering an incorrect value. The InputDate's drop-down calendar
                was developed as a separate control and can be used be used independently
                from the InputDate control.</p>
            <p>
                Both InputDate and Calendar, specify several properties to alter the controls' behavior.
                The most commonly used properties include:</p>
            <ul>
                <li>
                    <b>value</b>: Specifies the date value for the control.</li>
                <li>
                    <b>min</b>: Specifies the minimum date value that can be entered in the control.</li>
                <li>
                    <b>max</b>: Specifies the maximum date value that can be entered in the control.</li>
            </ul>
            <p>
                The example below demonstrates how to use each of these properties.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound InputDate with min &amp; max&lt;/label&gt;
    &lt;div data-bind="wjInputDate: {
            value: today,
            min: minDate,
            max: maxDate }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound Calendar with min &amp; max&lt;/label&gt;
    &lt;div data-bind="wjCalendar: {
            value: today,
            min: minDate,
            max: maxDate }"
         style="width:300px;"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
    &lt;b&gt;Selected Date: &lt;span data-bind="text: format(today, 'd')"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Valid Range: &lt;span data-bind="text: format(minDate, 'd')"&gt;&lt;/span&gt; to 
    &lt;span data-bind="text: format(maxDate, 'd')"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
var today = new Date();
this.today = ko.observable(today);
this.minDate = ko.observable(new Date(today.getFullYear(), 0, 1));
this.maxDate = ko.observable(new Date(today.getFullYear(), 11, 31));
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Bound InputDate with min &amp; max</label>
                        <div data-bind="wjInputDate: {
                                value: today,
                                min: minDate,
                                max: maxDate }">
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Bound Calendar with min &amp; max</label>
                        <div data-bind="wjCalendar: {
                                 value: today,
                                 min: minDate,
                                 max: maxDate }" 
                             style="width:300px;">
                        </div>
                    </div>
                    <p>
                        <b>Selected Date: <span data-bind="text: format(today, 'd')"></span></b>
                    </p>
                    <p>
                        <b>Valid Range: <span data-bind="text: format(minDate, 'd')"></span> to 
                            <span data-bind="text: format(maxDate, 'd')"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- InputDate, InputTime and InputDateTime Controls-->
        <div>
            <h2>InputDate, InputTime and InputDateTime Controls</h2>
            <p>
                Similar to the InputDate control, the InputTime control allows you to modify the time portion of
                a JavaScript date. The InputTime control shares many of the same properties as the InputDate control,
                including <b>format</b>, <b>min</b>, <b>max</b>, and <b>value</b>. The InputTime control also offers a
                <b>step</b> property that allows you to specify the number of minutes between entries in its drop-down
                list.
            </p>
            <p>
                The InputDateTime control combines the InputDate and InputTime controls, allowing you to set the date
                and time portions of a JavaScript date. The The InputDateTime control has two drop-downs: a Calendar
                for picking dates, and a list for picking times.
            </p>
            <p>
                The example below illustrates how to use the InputTime control in conjunction with the InputDate
                control. Notice that these controls work together to edit the same JavaScript <b>Date</b> object
                and only update the part of the DateTime that they are responsible for.
            </p>
            <p>
                The example also shows an InputDateTime that updates both the date and time parts of the
                JavaScript <b>Date</b> object.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound InputDate with min, max, &amp; format&lt;/label&gt;
    &lt;div data-bind="wjInputDate: {
            value: today,
            min: minDate,
            max: maxDate,
            format: 'MMM dd, yyyy' }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound InputTime with min, max, &amp; step&lt;/label&gt;
    &lt;div data-bind="wjInputTime: {
            value: today,
            step: 15,
            min: '07:00',
            max: '19:00' }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound InputDateTime with min, max, format, and step&lt;/label&gt;
    &lt;div data-bind="wjInputDateTime: {
        value: today,
        format: 'MMM dd, yyyy hh:mm tt',
        min: minDate,
        max: maxDate,
        timeStep: 15,
        timeMin: '09:00',
        timeMax: '17:00' }"&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;
    &lt;b&gt;Selected Date &amp; Time: &lt;span data-bind="text: format(today, 'G')"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
var today = new Date();
this.today = ko.observable(today);
this.minDate = ko.observable(new Date(today.getFullYear(), 0, 1));
this.maxDate = ko.observable(new Date(today.getFullYear(), 11, 31));
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Bound InputDate with min, max, &amp; format</label>
                        <div data-bind="wjInputDate: {
                            value: today,
                            min: minDate,
                            max: maxDate,
                            format: 'MMM dd, yyyy' }">
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Bound InputTime with min, max, &amp; step</label>
                        <div data-bind="wjInputTime: {
                            value: today,
                            step: 15,
                            min: '07:00',
                            max: '19:00' }" >
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Bound InputDateTime with min, max, format, and step</label>
                        <div data-bind="wjInputDateTime: {
                            value: today,
                            format: 'MMM dd, yyyy hh:mm tt',
                            min: minDate,
                            max: maxDate,
                            timeStep: 15,
                            timeMin: '09:00',
                            timeMax: '17:00' }">
                        </div>
                    </div>
                    <p>
                        <b>Selected Date &amp; Time: <span data-bind="text: format(today, 'G')"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- ListBox -->
        <div>
            <h2>ListBox</h2>
            <p>
                The ListBox control displays a list of items and allows you to select items using your
                mouse and keyboard. Like the AutoComplete and ComboBox controls, you must specify the
                ListBox's <b>itemsSource</b> property in order to use the control.</p>
            <p>
                The example below allows you to select an item within the ListBox control, and also displays
                the control's <b>selectedIndex</b> and <b>selectedValue</b> properties.</p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;div data-bind="wjListBox: {
            itemsSource: cities,
            control: listBox,
            selectedIndex: listBoxIndex,
            selectedValue: listBoxValue }"
         style="height:150px;width:250px;"&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;p&gt;
        &lt;b&gt;selectedIndex: &lt;span data-bind="text: listBoxIndex"&gt;&lt;/span&gt;&lt;/b&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;b&gt;selectedValue: &lt;span data-bind="text: listBoxValue"&gt;&lt;/span&gt;&lt;/b&gt;
    &lt;/p&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
this.listBox = ko.observable(undefined);
this.listBoxIndex = ko.observable(undefined);
this.listBoxValue = ko.observable(undefined);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <div data-bind="wjListBox: {
                             itemsSource: cities,
                             control: listBox,
                             selectedIndex: listBoxIndex,
                             selectedValue: listBoxValue }"
                             style="height:150px;width:250px;">
                        </div>
                    </div>
                    <p>
                        <b>selectedIndex: <span data-bind="text: listBoxIndex"></span></b>
                    </p>
                    <p>
                        <b>selectedValue: <span data-bind="text: listBoxValue"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- InputNumber -->
        <div>
            <h2>InputNumber</h2>
            <p>
                The InputNumber control allows you to edit numbers, preventing you from entering invalid
                data and optionally formatting the numeric value as it is edited. The InputNumber can be
                used without specifying any of its properties; however, you'll typically want to bind it
                to some data using the <b>value</b> property.</p>
            <p>
                In addition to the <b>value</b> property, the InputNumber control offers several other
                properties that can be used to alter its behavior, such as:</p>
            <ul>
                <li>
                    <b>min</b>: Specifies the minimum numeric value that can be entered.</li>
                <li>
                    <b>max</b>: Specifies the maximum numeric value that can be entered.</li>
                <li>
                    <b>step</b>: Specifies the amount to add or subtract from the current
                    value when the spinner buttons are clicked.</li>
                <li>
                    <b>format</b>: Specifies the numeric format used to display the number being
                    edited. The format property uses a .NET-style
                    <a href="http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx" target="_blank">numeric format string</a>.
                </li>
            </ul>
            <p>
                The example below demonstrates how to use all of these properties.</p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Unbound with "n0" format&lt;/label&gt;
    &lt;div data-bind="wjInputNumber: { format: 'n0' }"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound with "n" format&lt;/label&gt;
    &lt;div data-bind="wjInputNumber: {
            value: pi,
            format: 'n' }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Bound with min (0), max (10), step, and "c2" format&lt;/label&gt;
    &lt;div data-bind="wjInputNumber: {
            value: price,
            format: 'c2',
            step: .5,
            min: 0,
            max: 10 }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Unbound with placeholder and required="false"&lt;/label&gt;
    &lt;div data-bind="wjInputNumber: {
            placeholder: 'enter a number...',
            required: false,
            value: null }"&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
this.pi = ko.observable(Math.PI);
this.price = ko.observable(3.5);
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Unbound with "n0" format</label>
                        <div data-bind="wjInputNumber: { format: 'n0' }"></div>
                    </div>
                    <div class="app-input-group">
                        <label>Bound with "n" format</label>
                        <div data-bind="wjInputNumber: {
                            value: pi,
                            format: 'n' }">
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Bound with min (0), max (10), step, and "c2" format</label>
                        <div data-bind="wjInputNumber: {
                            value: price,
                            format: 'c2',
                            step: .5,
                            min: 0,
                            max: 10 }">
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Unbound with placeholder and required="false"</label>
                        <div data-bind="wjInputNumber: {
                            placeholder: 'enter a number...',
                            required: false,
                            value: null }">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Menu -->
        <div>
            <h2>Menu</h2>
            <p>
                The Menu control allows you to create a simple drop-down list with clickable items. The Menu's
                items can be defined directly or by using the <b>itemsSource</b> property similar to the ComboBox.
                To specify the text displayed on the Menu, you can set the <b>header</b> property.</p>
            <p>
                The Menu control offers two ways to handle user selections, specifying a command on each menu item
                and the <b>itemClicked</b> event. Unlike the <b>itemClicked</b> event, commands are objects that
                implement two methods:</p>
            <ul>
                <li>
                    <b>executeCommand(param)</b>: A method that executes the command.</li>
                <li>
                    <b>canExecuteCommand(param)</b>: A method that returns a Boolean value specifying whether or
                    not the command can be executed. If the return value is false, the menu item is disabled automatically.</li>
            </ul>
            <p>
                The example below demonstrates how to use both approaches.</p>
            <div class="row">
                <div class="col-md-6">
                    <div data-bind="appTab: {}">
                        <div data-bind="appTabPane: {title: 'HTML'}">
                            <div class="pane-content">
&lt;div class="app-input-group"&gt;
    &lt;label&gt;itemClicked Event&lt;/label&gt;
    &lt;div data-bind="wjMenu: { header: 'File', itemClicked: menuItemClicked}"&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-file-o"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;New&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;create a new file&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-folder-open-o"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Open&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;open an existing file or folder&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-save"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Save&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;save the current file&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuSeparator: {}"&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-times"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Exit&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;exit the application&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-bind="wjMenu: { header: 'Edit', itemClicked: menuItemClicked}"&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-cut"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Cut&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;move the current selection to the clipboard&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-copy"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Copy&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;copy the current selection to the clipboard&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: {}"&gt;&lt;i class="fa fa-paste"&gt;&lt;/i&gt;&nbsp;&nbsp;&lt;b&gt;Paste&lt;/b&gt;&lt;br&gt;&lt;small&gt;&lt;i&gt;insert clipboard content at the cursor position&lt;/i&gt;&lt;/small&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;div class="app-input-group"&gt;
    &lt;label&gt;Commands&lt;/label&gt;
    &lt;div data-bind="wjMenu: { header: 'Change Tax' }"&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .25 }"&gt;+ 25%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .10 }"&gt;+ 10%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .05 }"&gt;+ 5%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .01 }"&gt;+ 1%&lt;/span&gt;
        &lt;span data-bind="wjMenuSeparator: {}"&gt;&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.01 }"&gt;- 1%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.05 }"&gt;- 5%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.10 }"&gt;- 10%&lt;/span&gt;
        &lt;span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.25 }"&gt;- 25%&lt;/span&gt;
    &lt;/div&gt;
    &lt;div data-bind="wjInputNumber: { value: tax, format: 'p0', min: 0, max: 1, step: .05 }"&gt;&lt;/div&gt;
&lt;/div&gt;
                            </div>
                        </div>
                        <div data-bind="appTabPane: {title: 'JS'}">
                            <div class="pane-content">
this.tax = ko.observable(.07);

this.menuItemClicked = function (data, sender, args) {
    alert('You\'ve selected option ' + sender.selectedIndex + ' from the ' + sender.header + ' menu!');
};

this.menuCommand = {
    executeCommand: function (arg) {
        self.tax(self.tax() + arg);
    },
    canExecuteCommand: function (arg) {
        if (wijmo.isNumber(arg)) {
            var val = self.tax() + arg;
            return val &gt;= 0 &amp;&amp; val &lt;= 1;
        }
        return false;
    }
};
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>itemClicked Event</label>
                        <div data-bind="wjMenu: { header: 'File', itemClicked: menuItemClicked}">
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-file-o"></i>&nbsp;&nbsp;<b>New</b><br><small><i>create a new file</i></small></span>
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-folder-open-o"></i>&nbsp;&nbsp;<b>Open</b><br><small><i>open an existing file or folder</i></small></span>
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-save"></i>&nbsp;&nbsp;<b>Save</b><br><small><i>save the current file</i></small></span>
                            <span data-bind="wjMenuSeparator: {}"></span>
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-times"></i>&nbsp;&nbsp;<b>Exit</b><br><small><i>exit the application</i></small></span>
                        </div>
                        <div data-bind="wjMenu: { header: 'Edit', itemClicked: menuItemClicked}">
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-cut"></i>&nbsp;&nbsp;<b>Cut</b><br><small><i>move the current selection to the clipboard</i></small></span>
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-copy"></i>&nbsp;&nbsp;<b>Copy</b><br><small><i>copy the current selection to the clipboard</i></small></span>
                            <span data-bind="wjMenuItem: {}"><i class="fa fa-paste"></i>&nbsp;&nbsp;<b>Paste</b><br><small><i>insert clipboard content at the cursor position</i></small></span>
                        </div>
                    </div>
                    <div class="app-input-group">
                        <label>Commands</label>
                        <div data-bind="wjMenu: { header: 'Change Tax' }">
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .25 }">+ 25%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .10 }">+ 10%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .05 }">+ 5%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: .01 }">+ 1%</span>
                            <span data-bind="wjMenuSeparator: {}"></span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.01 }">- 1%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.05 }">- 5%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.10 }">- 10%</span>
                            <span data-bind="wjMenuItem: { cmd: menuCommand, cmdParam: -.25 }">- 25%</span>
                        </div>
                        <div data-bind="wjInputNumber: { value: tax, format: 'p0', min: 0, max: 1, step: .05 }"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- app scripts -->
    <script src="scripts/bindings/appBindings.js"></script>
    <script src="scripts/viewmodels/appVM.js"></script>
    <script src="scripts/app.js"></script>

    <!-- Google analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-208280-14', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>