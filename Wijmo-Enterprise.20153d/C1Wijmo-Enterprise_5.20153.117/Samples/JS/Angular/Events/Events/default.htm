<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Angular Wijmo Events</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- jQuery/Angular/Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.0.0.min.js" type="text/javascript"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" />

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.chart.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.angular.min.js" type="text/javascript"></script>
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />

    <!-- app scripts and styles -->
    <script src="scripts/app.js"></script>
    <script src="scripts/controllers/standardHandlerCtrl.js"></script>
    <script src="scripts/controllers/mvcHandlerCtrl.js"></script>
    <script src="scripts/controllers/angularEventsCtrl.js"></script>
    <script src="scripts/directives/appDctv.js"></script>
    <link rel="stylesheet" href="styles/app.css" />
</head>
<body ng-app="app" >

    <div class="header">
        <div class="container">
            <h1>
                <img src="resources/wijmo5.png" />
                Events
            </h1>
            <p>
                This sample shows how to bind to Wijmo control events and integrate 
                them with the Angular event broadcasting infrastructure.
            </p>
        </div>
    </div>

    <div class="container">

        <!-- Binding to Wijmo events -->
        <div>
            <h2>Binding to Wijmo events</h2>
            <p>
                The <a href="http://wijmo.com/5/docs/topic/wijmo.angular.Module.html" 
                target="_blank">wijmo.angular</a> module allows you to bind to control 
                events by specifying the event handler as a value of the attribute 
                corresponding to the control event name. You can specify any valid 
                AngularJS expression as an event handler.</p>
            <p>
                The expression may reference any controller scope properties, 
                plus two additional variables:</p>
            <ul style="list-style-type:none">
                <li>
                    <b>s</b> - Refers to the event sender, the control to which
                    the handler is bound.</li>
                <li>
                    <b>e</b> - Holds event arguments, if any. Note that many events 
                    don't provide any event data, so this variable has an 
                    undefined value.
                </li>
            </ul>
            <p>
                The most basic form of an event handler is a function with  
                <b>sender</b> and <b>eventArgs</b> parameters, like you use 
                when you attach a handler in JavaScript code. 
            </p>
            <p>
                The example below attaches the controller scope's <b>onValueChanged</b>
                function to the <a target="_blank"
                href="http://wijmo.com/5/docs/topic/wijmo.input.InputNumber.Class.html">
                InputNumber</a> control's <b>valueChanged</b> event and shows a dialog 
                with the new control value read from the <b>InputNumber.value</b> property:
            </p>
            <div class="row">
                <div class="col-md-6">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-input-number 
    value-changed="onValueChanged(s,e)" 
    format="n0" 
    step="10"&gt;
&lt;/wj-input-number&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
$scope.onValueChanged = function (sender, eventArgs) {
    alert('New value is ' + sender.value);
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-6" ng-controller="standardHandlerCtrl">
                    <h4>Result (live):</h4>
                    <wj-input-number 
                        value-changed="onValueChanged(s,e)" 
                        format="n0" 
                        step="10">
                    </wj-input-number>
                </div>
            </div>
        </div>

        <!-- True MVC -->
        <div>
            <h2>True MVC handling</h2>
            <p>
                In order to retrieve the new value in the example above, the event
                handler function in the controller must be familiar with the 
                <b>InputNumber</b> control, which is a part of the view, and 
                reads its <b>value</b> property to get the new value. You may
                not like this if you are trying for a true MVC approach and 
                want the controller to know nothing about its view.</p>
            <p>
                Fortunately, you can easily correct this. In the example below, the 
                <b>onValueChanged</b> function is declared in the controller with the 
                single <b>newValue</b> parameter, instead of the parameters 
                referencing the control and its data, and the event expression in 
                the markup uses the <b>s.value</b> expression to pass the new value itself, 
                instead of the reference to the control.</p>
            <div class="row">
                <div class="col-md-6">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content">
&lt;wj-input-number 
    value-changed="onValueChanged(s.value)" 
    format="n0" 
    step="10"&gt;
&lt;/wj-input-number&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
$scope.onValueChanged = function (newValue) {
    alert('New value is ' + newValue);
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-6" ng-controller="mvcHandlerCtrl">
                    <h4>Result (live):</h4>
                    <wj-input-number 
                        value-changed="onValueChanged(s.value)" 
                        format="n0"
                        step="10">
                    </wj-input-number>
                </div>
            </div>
        </div>

        <!-- Angular events -->
        <div>
            <h2>Integrating with Angular events</h2>
            <p>
                AngularJS provides the event propagation and handling infrastructure
                represented by the <a target="_blank" 
                href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope">
                $scope</a> API methods: $emit, $broadcast, and $on. This API allows multiple 
                controllers in the same page to exchange messages and behave 
                as a single functional unit.</p>
            <p>
                You can integrate Wijmo events into this infrastructure by calling the
                <a href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$emit" 
                target="_blank">$emit</a> or <a target="_blank" 
                href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$broadcast">
                $broadcast</a> method from the event handler function 
                defined in the controller scope, or define such calls right in the event 
                attribute on the control directive element, providing another event name 
                agreed upon between controllers, and event data in the approved format.</p>
            <p>
                In the example below, three controllers are organized in a hierarchical 
                structure:</p>
            <dl>
                <dt>Level 1</dt> 
                    <dd>The <b>companyCtrl</b> controller has a 
                    <b>company</b> property that stores an object representing a company and 
                    its stock exchange data.<br /> 
                    The HTML header element is bound to the <b>company.name</b> property, 
                    making it a header for the whole view.</dd>
                <dt>Level 2</dt> 
                <dd>The <b>companyListCtrl</b> controller provides an 
                    array of companies in the <b>companies</b> property. <br /> 
                    Each company item defines a company <strong>name</strong>, stock market <strong>symbol</strong> and an array 
                    of stock <b>prices</b> for a certain period of time. <br /> 
                    The Wijmo <b>ListBox</b> control is bound to this property, allowing users 
                    to choose companies in the list.</dd>
                <dt>Level 3</dt>
                <dd>The <b>companyPricesCtrl</b> controller exposes the <b>prices</b> 
                    property with an array of stock prices for each symbol. <br /> 
                    The Wijmo <b>FlexChart</b> control is bound to this property, and shows a 
                    graph of the stock prices for the selected symbol.</dd>
            </dl>
            <p>
                The <b>companyCtrl</b> and <b>companyPricesCtrl</b> controllers recognize
                the <b>companyChanged</b> event using the <a target="_blank"
                href="https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$on"> 
                $scope.$on</a> method and update their <b>company</b> and <b>prices</b> 
                properties accordingly.</p>
            <p>
                The Wijmo <a href="http://wijmo.com/5/docs/topic/wijmo.input.ListBox.Class.html" 
                target="_blank">ListBox</a> control, which is bound to the 
                <b>companyListCtrl.companies</b> array, drives the whole unit. The 
                <b>selectedIndexChanged</b> event handler of the control calls the AngularJS
                <b>$emit</b> and <b>$broadcast</b> methods, passing <b>companyChanged</b> 
                as the event name and the new selected company as the event data, forcing the 
                other two controllers to update their property values, which in turn 
                causes the bound views to update.</p>
            <p>
                The AngularJS event is triggered right from the event attribute in the markup:
                <br />
                <i>selected-index-changed="$emit('companyChanged', s.selectedItem); $broadcast('companyChanged', s.selectedItem)"</i>
            </p>
            <div class="row">
                <div class="col-md-6">
                    <app-tab>
                        <app-tab-pane title="HTML">
                            <div class="pane-content" ng-non-bindable>
&lt;!-- Level 1 --&gt;
&lt;div ng-controller="companyCtrl"&gt;
    &lt;h2 style="color:#88bde6"&gt;{{company.name}}&lt;/h2&gt;

    &lt;!-- Level 2 --&gt;
    &lt;div ng-controller="companyListCtrl" class="child-content"&gt;
        &lt;wj-list-box 
            items-source="companies"
            display-member-path="symbol"
            selected-index-changed=
                "$emit('companyChanged', s.selectedItem);
                 $broadcast('companyChanged', s.selectedItem)"
            style="width:250px"&gt;&lt;/wj-list-box&gt;

        &lt;!-- Level 3 --&gt;
        &lt;div ng-controller="companyPricesCtrl" class="child-content"&gt;
            &lt;wj-flex-chart 
                    items-source="prices"
                    binding-x="date"
                    binding="price"
                    header="Prices (1st trading day of each month)"
                    chart-type="LineSymbols"&gt;
                &lt;wj-flex-chart-axis 
                    wj-property="axisX" 
                    format="MMM" 
                    major-unit="30"&gt;
                    &lt;/wj-flex-chart-axis&gt;
                &lt;wj-flex-chart-legend position="None"&gt;
                    &lt;/wj-flex-chart-legend&gt;
                &lt;wj-flex-chart-series name="Prices"&gt;
                    &lt;/wj-flex-chart-series&gt;
            &lt;/wj-flex-chart&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
                            </div>
                        </app-tab-pane>
                        <app-tab-pane title="JS">
                            <div class="pane-content">
var app = angular.module('app');

app.controller('companyCtrl', function appCtrl($scope) {
    $scope.company = undefined;

    $scope.$on('companyChanged', function (event, data) {
        $scope.company = data;
        if (!$scope.$root.$$phase) {
            $scope.$apply();
        }
    });
});


app.controller('companyListCtrl', function appCtrl($scope) {
   $scope.companies = [
      { name: 'Apple Inc', symbol: 'AAPL', prices: getPrices('AAPL') },
      { name: 'Amazon, Inc.', symbol: 'AMZN', prices: getPrices('AMZN') },
      { name: 'Google Inc.', symbol: 'GOOG', prices: getPrices('GOOG') },
      { name: 'Yahoo Inc.', symbol: 'YHOO', prices: getPrices('YHOO') },
   ];
});

app.controller('companyPricesCtrl', function appCtrl($scope) {
    $scope.prices = [];

    $scope.$on('companyChanged', function (event, data) {
        $scope.prices = data.prices;
        if (!$scope.$root.$$phase) {
            $scope.$apply();
        }
    });
});

function getPrices(symbol) {
    switch (symbol) {
        case 'AAPL':
            return [
                { date: new Date('2014-11-03'), price: 108.93 },
                { date: new Date('2014-10-01'), price: 98.75 },
                { date: new Date('2014-09-02'), price: 102.85 },
                { date: new Date('2014-08-01'), price: 95.24 },
                { date: new Date('2014-07-01'), price: 92.66 },
            ];
        case 'AMZN':
            return [
                { date: new Date('2014-11-03'), price: 305.72 },
                { date: new Date('2014-10-01'), price: 317.46 },
                { date: new Date('2014-09-02'), price: 342.38 },
                { date: new Date('2014-08-01'), price: 307.06 },
                { date: new Date('2014-07-01'), price: 332.39 },
            ];
        case 'GOOG':
            return [
                { date: new Date('2014-11-03'), price: 555.22 },
                { date: new Date('2014-10-01'), price: 568.27 },
                { date: new Date('2014-09-02'), price: 577.33 },
                { date: new Date('2014-08-01'), price: 566.07 },
                { date: new Date('2014-07-01'), price: 582.67 },
            ];
        case 'YHOO':
            return [
                { date: new Date('2014-11-03'), price: 46.34 },
                { date: new Date('2014-10-01'), price: 40.32 },
                { date: new Date('2014-09-02'), price: 39.27 },
                { date: new Date('2014-08-01'), price: 35.62 },
                { date: new Date('2014-07-01'), price: 35.35 },
            ];
        default:
            return [];
    }
}
                            </div>
                        </app-tab-pane>
                    </app-tab>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <!-- Level 1 -->
                    <div ng-controller="companyCtrl">
                        <h2 style="color:#88bde6">{{company.name}}</h2>
                        <!-- Level 2 -->
                        <div ng-controller="companyListCtrl" class="child-content">
                            <wj-list-box items-source="companies"
                                         display-member-path="symbol"
                                         selected-index-changed="$emit('companyChanged', s.selectedItem);
                                         $broadcast('companyChanged', s.selectedItem)"
                                         style="width:250px"></wj-list-box>
                            <!-- Level 3 -->
                            <div ng-controller="companyPricesCtrl" class="child-content">
                                <wj-flex-chart items-source="prices"
                                               binding-x="date"
                                               binding="price"
                                               header="Prices (1st trading day of each month)"
                                               chart-type="LineSymbols">
                                    <wj-flex-chart-axis wj-property="axisX" format="MMM" major-unit="30"></wj-flex-chart-axis>
                                    <wj-flex-chart-legend position="None"></wj-flex-chart-legend>
                                    <wj-flex-chart-series name="Prices"></wj-flex-chart-series>
                                </wj-flex-chart>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Google analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-208280-14', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>