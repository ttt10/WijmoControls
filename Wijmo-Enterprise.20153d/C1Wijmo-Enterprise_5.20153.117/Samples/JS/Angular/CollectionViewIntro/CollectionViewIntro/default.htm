<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>CollectionView Introduction</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Third Party -->
    <script src="http://code.jquery.com/jquery-2.0.0.min.js"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.grid.min.js" type="text/javascript"></script>
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet" />

    <!-- Wijmo-Angular interop -->
    <script src="scripts/vendor/wijmo.angular.min.js" type="text/javascript"></script>

    <!-- app scripts and styles -->
    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/services.js" type="text/javascript"></script>
    <script src="scripts/filters.js" type="text/javascript"></script>
    <script src="scripts/directives.js" type="text/javascript"></script>
    <link rel="stylesheet" href="styles/app.css" type="text/css" />
</head>
<body ng-app="app">
    <div class="header visible-xs visible-sm">
        <div class="container">
            <h1>
                CollectionView 101</h1>
        </div>
    </div>
    <div class="header hidden-xs hidden-sm">
        <div class="container">
            <img src="resources/wijmo5.png" />
            <h1>
                CollectionView 101</h1>
            <p>
                This page shows how to get started with Wijmo's CollectionView class.</p>
        </div>
    </div>
    <div class="container">

        <!-- Introduction -->
        <p>
			Wijmo 5 has a solid infrastructure based on a powerful data layer that is familiar to
            .NET developers. The main data binding interface is the <a target="_blank" 
            href="http://wijmo.com/5/docs/topic/wijmo.collections.ICollectionView.Interface.html">
            ICollectionView</a>. Wijmo includes several classes that implement  
            ICollectionView. The most basic is the <a target="_blank" 
            href="http://wijmo.com/5/docs/topic/wijmo.collections.CollectionView.Class.html">
            CollectionView</a> class, which uses regular JavaScript arrays as data sources.</p>
		<p>
			The CollectionView class implements the following interfaces:</p>
        <ul>
            <li><b>ICollectionView</b>: Provides current record management, custom sorting, 
                filtering, and grouping.</li>
            <li><b>IEditableCollectionView</b>: Provides methods for editing, adding, and 
                removing items.</li>
            <li><b>IPagedCollectionView</b>: Provides paging for navigating through large
                numbers of items.</li>
        </ul>
        <p>
            The CollectionView class can keep track of changes made to the data. This 
            feature is useful for submitting changes to the server.</p>

        <!-- getting started -->
        <h2>Getting Started</h2>
        <p>
			To use the CollectionView class, start by declaring it and passing in a 
            regular array as the data source. Then access the view using the <b>items</b> property.</p>
        <p>
            In this example, we show the CollectionView instance in an HTML table.</p>
        <p>
            Steps for getting started with the CollectionView class in AngularJS applications:</p>
        <ol>
            <li>Add references to AngularJS, Wijmo, and the Wijmo AngularJS directives.</li>
            <li>Optionally add a reference to FlexGrid.</li>
            <li>Add references to your app, services, filters, and  directives modules.</li>
            <li>Add a table (or FlexGrid) to the page and bind it to the CollectionView data.</li>
            <li>Add a controller to provide data and logic.</li>
            <li>Optionally add some CSS to customize the table's appearance.</li>
        </ol>
        <p>
            <b>Notes:</b> In the Tracking Changes sample below, we use FlexGrid instead of a table, 
            so you can see the difference in the markup.</p>
        <div class="row" ng-controller="appGSCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
  &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="scripts/angular.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.grid.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.angular.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body ng-app="app"&gt;
  &lt;div ng-controller="appGSCtrl"&gt;
    &lt;div class="sGrid"&gt;
      &lt;table class="table table-condensed table-bordered"&gt;
        &lt;thead&gt;
          &lt;tr class="active"&gt;
            &lt;th class="text-center" ng-repeat="fieldName in fieldNames"&gt;
              {&#8203;{fieldName}}
            &lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr ng-repeat="item in cvGettingStarted.items"&gt;
            &lt;td class="text-center" ng-repeat="name in fieldNames"&gt;
              {&#8203;{item[name] | globalize}}
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for getting started */
var app = angular.module('app');
app.controller('appGSCtrl', function ($scope, dataSvc) {
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(10));
  $scope.fieldNames = dataSvc.getNames();
  $scope.viewItems = cv.items;
});
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="CSS">
                        <div class="pane-content">
/* set default grid height and some shadow */
.sGrid {
  background-color: #fff;
  box-shadow: 4px 4px 10px 0 rgba(50, 50, 50, 0.75);
  height: 300px;
  margin-bottom: 12px;
  overflow: auto;
}
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvGettingStarted.items">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
        </div>
        </div>
        </div>

        <!-- current record management -->
        <h2>Current Record Management</h2>
        <p>
            Since it implements the ICollectionView interface, you can use the CollectionView 
            class to manage the current record. </p>
        <p>
            This example shows how you can use the API provided in the CollectionView class to 
            change the current record by clicking a row in the grid or by clicking buttons.</p>
        <p>
            We use the <b>currentPosition</b> property to get the position of the current record 
            in the collection, and use the following methods to change the current position:</p>
            <ul>
                <li>moveCurrentTo(item)</li>
                <li>moveCurrentToFirst()</li>
                <li>moveCurrentToLast()</li>
                <li>moveCurrentToNext()</li>
                <li>moveCurrentToPosition(index)</li>
                <li>moveCurrentToPrevious()</li></ul>
        <p> 
            When the position changes, we use the <b>currentChanging</b> and <b>currentChanged</b> 
            events to track it. We can cancel the change of position in the <b>currentChanging</b> 
            event.</p>
        <p>
            Click the <b>Next</b> button to set the next record as the current one. Click the 
            <b>Previous</b> button to set the previous record as the current one. Click the 
            <b>Stop at 4th Row</b> button to prevent the current record from being changed once 
            it reaches the 4th row. Click the <b>Clear</b> button to remove the stop and allow 
            the current records to be changed freely.</p>
        <div class="row" ng-controller="appCRMCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appCRMCtrl"&gt;
  &lt;div class=&quot;row-fluid well btn-group&quot;&gt;
    &lt;button class=&quot;btn btn-default&quot; ng-click=&quot;cvCRM.moveCurrentToNext()&quot;&gt;
        Next&lt;/button&gt;
    &lt;button class=&quot;btn btn-default&quot; ng-click=&quot;cvCRM.moveCurrentToPrevious()&quot;&gt;
        Previous&lt;/button&gt;
    &lt;button class=&quot;btn btn-default&quot; ng-click=&quot;stopCurrent()&quot;&gt;
        Stop at 4th Row&lt;/button&gt;
    &lt;button class=&quot;btn btn-default&quot; ng-click=&quot;reset()&quot;&gt;
        Clear&lt;/button&gt;
  &lt;/div&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class=&quot;table table-condensed table-bordered&quot;&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;active&quot;&gt;
          &lt;th class=&quot;text-center&quot; ng-repeat=&quot;fieldName in fieldNames&quot;&gt;
              {&#8203;{fieldName}}&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat=&quot;item in cvCRM.items&quot;
            ng-class=&quot;{success: item == cvCRM.currentItem}&quot;
            ng-click=&quot;cvCRM.moveCurrentTo(item)&quot;&gt;
          &lt;td class=&quot;text-center&quot; ng-repeat=&quot;name in fieldNames&quot;&gt;
              {&#8203;{item[name] | globalize}}&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* Define the controller for current record management */
var app = angular.module('app');
app.controller('appCRMCtrl', function ($scope, dataSvc) {
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(10));
  $scope.cvCRM = cv;
  $scope.fieldNames = dataSvc.getNames();

  // Forbid changing the current record when the 4th one is current.
  var stopCurrentIn4th = function (sender, e) {

    // When the current record is the 4th record, stop moving.
    if (sender.currentPosition === 3) {
      e.cancel = true;
    }
  }

  $scope.stopCurrent = function () {
    cv.currentChanging.addHandler(stopCurrentIn4th);
  };

  // Restore the ability to change the current record.
  $scope.reset = function () {
    cv.currentChanging.removeHandler(stopCurrentIn4th);
  };
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="row-fluid well btn-group">
                        <button class="btn btn-default" ng-click="cvCRM.moveCurrentToNext()">Next</button>
                        <button class="btn btn-default" ng-click="cvCRM.moveCurrentToPrevious()">Previous</button>
                        <button class="btn btn-default" ng-click="stopCurrent()">Stop at 4th Row</button>
                        <button class="btn btn-default" ng-click="reset()">Clear</button>
        </div>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvCRM.items"
                                ng-class="{success: item == cvCRM.currentItem}"
                                ng-click="cvCRM.moveCurrentTo(item)">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- sorting -->
        <h2>Sorting</h2>
        <p>
            The CollectionView class, like the one in .NET, implements the 
            ICollectionView interface to support sorting. To enable sorting, 
            add one or more <a target="_blank"
            href="http://wijmo.com/5/docs/topic/wijmo.collections.SortDescription.Class.html">
            SortDescription</a> objects to an array and pass it to the 
            CollectionView.sortDescriptions property. Now you can get the sorted 
            results from the <b>CollectionView.items</b> property.</p>
        <p>
            SortDescription objects are flexible, allowing you to sort data based 
            on a value in ascending or descending order. In the sample below, click a 
            property in the grid header to sort by that property in ascending order.
            Click it again to sort by that property in descending order.</p>
        <div class="row" ng-controller="appSortingCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appSortingCtrl"&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class=&quot;table table-condensed table-bordered&quot;&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;active&quot;&gt;
          &lt;th 
              class=&quot;text-center&quot; 
              ng-repeat=&quot;fieldName in fieldNames&quot;
              ng-click=&quot;toggleSort(fieldName)&quot; 
              style=&quot;cursor:pointer&quot;&gt;
                  {&#8203;{fieldName}}
                  &lt;span style=&quot;color: red&quot;&gt;
                      {&#8203;{getSort(fieldName)}}&lt;/span&gt;
          &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat=&quot;item in cvSorting.items&quot;&gt;
          &lt;td class=&quot;text-center&quot; ng-repeat=&quot;name in fieldNames&quot;&gt;
              {&#8203;{item[name] | globalize}}&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* Define the controller for sorting. */
var app = angular.module('app');
app.controller('appSortingCtrl', function ($scope, dataSvc) {

  // Initialize the CollectionView.
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(10));

  // Initialize the scope data.
  $scope.cvSorting = cv;
  $scope.fieldNames = dataSvc.getNames();

  // Sorting
  $scope.toggleSort = function (fieldName) {

    // Get all of the sort descriptions.
    var sd = cv.sortDescriptions;
    var ascending = true;

    // Find whether the field is sorted.
    if (sd.length &gt; 0 && sd[0].property === fieldName) {

      // If sorting is found, toggle the sort order.
      ascending = !sd[0].ascending;
    }

    // Create a new SortDescription object.
    var sdNew = new wijmo.collections.SortDescription(fieldName, ascending);

    // Remove any old sort descriptions and add the newly created one.
    sd.splice(0, sd.length, sdNew);
  };

  // Get the sort label.
  $scope.getSort = function (propName) {
    var sd = cv.sortDescriptions;
    if (sd.length &gt; 0 && sd[0].property === propName) {
      return sd[0].ascending ? '▲' : '▼';
    }

    return '';
  };
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames"
                                    ng-click="toggleSort(fieldName)" style="cursor:pointer">
                                    {{fieldName}}<span style="color: red">{{getSort(fieldName)}}</span>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvSorting.items">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

         <!-- filtering -->
        <h2>Filtering</h2>
        <p>
            The CollectionView class, like the one in .NET, implements the ICollectionView  
            interface to support filtering. To enable filtering, set the <b>CollectionView.filter</b> 
            property to a function that determines which objects to include 
            in the view.</p>
        <p>
            In this example, we create a filter for the country, and get the filter 
            value from the input control. When you enter a value by which to filter, the grid  
            refreshes and shows only the filtered data.</p>
        <div class="row" ng-controller="appFilteringCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appFilteringCtrl"&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class="table table-condensed table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr class="active"&gt;
          &lt;th class="text-center" ng-repeat="fieldName in fieldNames"&gt;
            {&#8203;{fieldName}}
          &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat="item in cvFiltering.items"&gt;
          &lt;td class="text-center" ng-repeat="name in fieldNames"&gt;
            {&#8203;{item[name] | globalize}}
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for filtering */
var app = angular.module('app');
app.controller('appFilteringCtrl', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(10));

  // initialize the scope data.
  $scope.cvFiltering = cv;
  $scope.filter = '';
  $scope.fieldNames = dataSvc.getNames();

  // define the filter function for collectionview
  function filterFunction(item) {
    var filter = $scope.filter.toLowerCase();
    if (!filter) {
      return true;
    }

    return item['country'].toLowerCase().indexOf(filter) &gt; -1;
  }

  // apply filter (applied on a 500 ms timeOut)
  var toFilter;
  $scope.$watch('filter', function () {
    if (toFilter) {
      clearTimeout(toFilter);
    }

    toFilter = setTimeout(function () {
      toFilter = null;
      if (cv.filter === filterFunction) {
        cv.refresh();
      }
      else {
        cv.filter = filterFunction;
      }

      $scope.$apply('cvFiltering.items');
    }, 500);
  });
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="row-fluid well">
                    <input type="text" class="form-control app-pad" placeholder="Please enter characters for the country by which to filter (case-insensitive)" ng-model="filter" />
        </div>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvFiltering.items">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- grouping -->
        <h2>Grouping</h2>
        <p>
            The CollectionView class, like the one in .NET, implements the ICollectionView 
            interface to support grouping. To enable grouping, add one or more <a target="_blank"
            href="http://wijmo.com/5/docs/topic/wijmo.collections.GroupDescription.Class.html">
            GroupDescription</a> objects to an array and pass it to the <b>CollectionView.groupDescriptions</b> 
            property. You must also set the grid's <b>showGroups</b> property to true when creating 
            the grid instance, as the default value is false.</p>
        <p>
            <b>GroupDescription</b> objects are flexible, allowing you to group data 
            based on value or on grouping functions. </p>
        <p>
            The example below groups the collection by whichever field you select from the 
            list. The grid shows not only the item's content but also group information: 
            the group name and the average value of the amount for the group appear in the
            group header row.</p>
        <p>
            <b>Notes</b>: Selecting one item in the list adds a new instance of the 
            GroupDescription. Subsequent selections nest groups. If you select an item from 
            the list for which a GroupDescription object already exists, nothing happens.
            In order to clear the group settings, select the first item in the list.</p>
        <div class="row" ng-controller="appGroupingCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div class="appGroupingCtrl"&gt;
  &lt;div class="row-fluid well"&gt;
    &lt;select 
        class="form-control" 
        ng-model="selectedGroupOpt" 
        ng-options="opt for opt in fieldNames"&gt;
      &lt;option value="" selected="selected"&gt;
          Please choose the field you want to group by...&lt;/option&gt;
    &lt;/select&gt;
  &lt;/div&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class="table table-condensed table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr class="active"&gt;
          &lt;th class="text-center" ng-repeat="fieldName in fieldNames"&gt;
              {&#8203;{fieldName}}&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat="item in groupItems"&gt;
          &lt;td class="active" ng-show="isGroupItem(item)" colspan="6"&gt;
            &lt;span ng-style="{
                            display:'inline-block', 
                            width: (item.level*25) + 'px'}"&gt;&lt;/span&gt;
            &lt;b&gt;{&#8203;{item.name | globalize}}&lt;/b&gt; 
            ({&#8203;{item.items.length}} items)
          &lt;/td&gt;
          &lt;td class="text-center" colspan="2" ng-show="isGroupItem(item)"&gt;
            {&#8203;{avgAmount(item)}}
          &lt;/td&gt;
          &lt;td 
              class="text-center" 
              ng-repeat="name in fieldNames" 
              ng-hide="isGroupItem(item)"&gt;
            {&#8203;{item[name] | globalize}}
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for grouping */
var app = angular.module('app');
app.controller('appGroupingCtrl', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(20));

  // initialize the scope data.
  $scope.cvGrouping = cv;
  $scope.fieldNames = dataSvc.getNames();
  $scope.groupItems = cv.items;
  $scope.selectedGroupOpt = '';

  $scope.isGroupItem = function (item) {
    return item instanceof wijmo.collections.CollectionViewGroup;
  };

  $scope.avgAmount = function (item) {

    // it only works when the item is a group item.
    if (!$scope.isGroupItem(item)) {
      return;
    }

    // get the average value of group amount values.
    var avg = item.getAggregate(wijmo.Aggregate.Avg, 'amount');

    return wijmo.Globalize.format(avg);
  };

  // update the group list
  cv.collectionChanged.addHandler(function () {
    $scope.groupItems = cv.items;
    if (cv.groups && cv.groups.length &gt; 0) {
      $scope.groupItems = [];

      for (var i = 0; i &lt; cv.groups.length; i++) {
        addGroup(cv.groups[i]);
      }
    }
  });

  function addGroup(g) {
    $scope.groupItems.push(g);

    if (g.isBottomLevel) {
      for (var i = 0; i &lt; g.items.length; i++) {
        $scope.groupItems.push(g.items[i]);
      }
    }
    else {
      for (var i = 0; i &lt; g.groups.length; i++) {
        addGroup(g.groups[i]);
      }
    }
  }

  //apply the group setting
  $scope.$watch('selectedGroupOpt', function () {
    var gd,
        fieldName = $scope.selectedGroupOpt;

    gd = cv.groupDescriptions;

    if (!fieldName) {

      // clear all the group settings.
      gd.splice(0, gd.length);
      return;
    }

    if (findGroup(fieldName) &gt;= 0) {
      return;
    }

    if (fieldName === 'amount') {

      // when grouping by amount, use ranges instead of specific values
      gd.push(new wijmo.collections.PropertyGroupDescription(fieldName, function (item, propName) {
        var value = item[propName]; // amount
        if (value &gt; 1000) return 'Large Amounts';
        if (value &gt; 100) return 'Medium Amounts';
        if (value &gt; 0) return 'Small Amounts';
        return 'Negative Amounts';
      }));
    }
    else {

      // group by specific property values
      gd.push(new wijmo.collections.PropertyGroupDescription(fieldName));
    }
  });

  // check whether the group with the specified property name already exists.
  function findGroup(propName) {
    var gd = cv.groupDescriptions;
    for (var i = 0; i &lt; gd.length; i++) {
      if (gd[i].propertyName === propName) {
        return i;
      }
    }

    return -1;
  }
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="row-fluid well">
                    <select class="form-control" ng-model="selectedGroupOpt" ng-options="opt for opt in fieldNames">
                        <option value="" selected="selected">Please choose the field by which to group.</option>
                    </select>
        </div>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in groupItems">
                                <td class="active" ng-show="isGroupItem(item)" colspan="6">
                                    <span ng-style="{display:'inline-block', width: (item.level*25) + 'px'}"></span>
                                    <b>{{item.name | globalize}}</b> ({{item.items.length}} items)
                                </td>
                                <td class="text-center" colspan="2" ng-show="isGroupItem(item)">
                                    {{avgAmount(item)}}
                                </td>
                                <td class="text-center" ng-repeat="name in fieldNames" ng-hide="isGroupItem(item)">
                                    {{item[name] | globalize}}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- editing -->
        <h2>Editing</h2>
        <p>
            The CollectionView class, like the one in .NET, implements the IEditableCollectionView 
            interface to support editing.</p>
        <p>
            This sample shows how you can update, add, and remove items in a collection.</p>
        <p>
            In the grid, select a row and press the <b>Edit Detail</b> button below to start 
            editing. When you finish editing in the popup dialog, press the <b>OK</b> button to 
            commit your updates. If you want to add a new record to the  collection, press the 
           <b>Add</b> button and enter content for the item in the popup dialog. Press OK to 
            commit the new record. Select a row and press the <b>Delete</b> button to remove a 
            record from the collection.</p>
        <div class="row" ng-controller="appEditingCtrl">
           <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appEditingCtrl"&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class="table table-condensed table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr class="active"&gt;
          &lt;th class="text-center" ng-repeat="fieldName in fieldNames"&gt;
              {&#8203;{fieldName}}&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat="item in cvEditing.items"
            ng-click="cvEditing.moveCurrentTo(item)"
            ng-class="{success: item == cvEditing.currentItem}"&gt;
          &lt;td class="text-center" ng-repeat="name in fieldNames"&gt;
              {&#8203;{item[name] | globalize}}&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;

  &lt;!-- commands --&gt;
  &lt;div class="row-fluid well"&gt;
    &lt;!-- edit details in a popup --&gt;
    &lt;button 
        class="btn btn-default" 
        data-toggle="modal" 
        data-target="#dlgDetail"
        ng-click="cvEditing.editItem(currentItem)"
        ng-disabled="!currentItem"&gt;
    Edit Detail...&lt;/button&gt;
    &lt;button 
        class="btn btn-default" 
        data-toggle="modal" 
        data-target="#dlgDetail" 
        ng-click="cvEditing.addNew()"&gt;
    Add...&lt;/button&gt;
    &lt;button 
        class="btn btn-default"
        ng-click="cvEditing.remove(currentItem)"
        ng-disabled="!currentItem"&gt;
    Delete&lt;/button&gt;
  &lt;/div&gt;

  &lt;!-- a dialog for editing item details --&gt;
  &lt;div class="modal fade" id="dlgDetail"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button 
              type="button" 
              class="close" 
              data-dismiss="modal" 
              aria-hidden="true"&gt;
          &amp;times;&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Edit Item&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;dl class="dl-horizontal"&gt;
            &lt;dt&gt;ID&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.id" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Start Date&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  formatted-model 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.start" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;End Start&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  formatted-model 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.end" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Country&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.country" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Product&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.product" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Color&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.color" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Amount&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="text" 
                  ng-model="currentItem.amount" /&gt;
            &lt;/dd&gt;
            &lt;dt&gt;Active&lt;/dt&gt;
            &lt;dd&gt;
              &lt;input 
                  class="form-control" 
                  type="checkbox" 
                  ng-model="currentItem.active" /&gt;
            &lt;/dd&gt;
          &lt;/dl&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;button 
              type="button" 
              class="btn btn-primary" 
              data-dismiss="modal" 
              ng-click="confirmUpdate()"&gt;
           OK&lt;/button&gt;
          &lt;button 
              type="button" 
              class="btn btn-warning" 
              data-dismiss="modal" 
              ng-click="cancelUpdate()"&gt;
            Cancel&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for editing */
var app = angular.module('app');
app.controller('appEditingCtrl', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(10));

  // define the new item value.
  cv.newItemCreator = function () {
    var item = dataSvc.getData(1)[0];

    // aggregate the max value of id in the collection.
    item.id = wijmo.getAggregate(wijmo.Aggregate.Max, cv.sourceCollection, 'id') + 1;

    return item;
  }

  // initialize the scope data.
  $scope.cvEditing = cv;
  $scope.fieldNames = dataSvc.getNames();
  $scope.currentItem = cv.currentItem;
  $scope.confirmUpdate = function () {

    // commit edit or addition
    cv.commitEdit();
    cv.commitNew();
  };

  $scope.cancelUpdate = function () {

    // cancel editing or adding
    cv.cancelEdit();
    cv.cancelNew();
  };

  // Sync the currentItem scope with the CollectionView.
  cv.currentChanged.addHandler(function () {
    $scope.currentItem = cv.currentItem;
  });
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvEditing.items"
                                ng-click="cvEditing.moveCurrentTo(item)"
                                ng-class="{success: item == cvEditing.currentItem}">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- commands -->
                <div class="row-fluid well">

                    <!-- edit details in a popup -->
                    <button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail"
                        ng-click="cvEditing.editItem(currentItem)"
                        ng-disabled="!currentItem">
                        Edit Detail...
                    </button>
                    <button class="btn btn-default" data-toggle="modal" data-target="#dlgDetail" ng-click="cvEditing.addNew()">
                        Add...
                    </button>
                    <button class="btn btn-default"
                        ng-click="cvEditing.remove(currentItem)"
                        ng-disabled="!currentItem">
                        Delete
                    </button>
                </div>

                <!-- a dialog for editing item details -->
                <div class="modal fade" id="dlgDetail">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                    &times;
                                </button>
                                <h4 class="modal-title">Edit Item</h4>
                            </div>
                            <div class="modal-body">
                                <dl class="dl-horizontal">
                                    <dt>ID</dt>
                                    <dd>
                                        <input class="form-control" type="text" ng-model="currentItem.id" />
                                    </dd>
                                    <dt>Start Date</dt>
                                    <dd>
                                        <input formatted-model class="form-control" type="text" ng-model="currentItem.start" />
                                    </dd>
                                    <dt>End Start</dt>
                                    <dd>
                                        <input formatted-model class="form-control" type="text" ng-model="currentItem.end" />
                                    </dd>
                                    <dt>Country</dt>
                                    <dd>
                                        <input class="form-control" type="text" ng-model="currentItem.country" />
                                    </dd>
                                    <dt>Product</dt>
                                    <dd>
                                        <input class="form-control" type="text" ng-model="currentItem.product" />
                                    </dd>
                                    <dt>Color</dt>
                                    <dd>
                                        <input class="form-control" type="text" ng-model="currentItem.color" />
                                    </dd>
                                    <dt>Amount</dt>
                                    <dd>
                                        <input class="form-control" type="text" ng-model="currentItem.amount" />
                                    </dd>
                                    <dt>Active</dt>
                                    <dd>
                                        <input class="form-control" type="checkbox" ng-model="currentItem.active" />
                                    </dd>
                                </dl>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-primary" data-dismiss="modal" ng-click="confirmUpdate()">
                                    OK
                                </button>
                                <button type="button" class="btn btn-warning" data-dismiss="modal" ng-click="cancelUpdate()">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- paging -->
        <h2>Paging</h2>
        <p>
            The CollectionView class, like the one in .NET, implements the 
            <b>IPagedCollectionView</b> interface to support paging.
            To enable paging, set the <b>IPagedCollectionView.pageSize</b> 
            property to the number of items you want on each page, and provide a UI
            for navigating the pages.</p>
        <p>
            In this example, the CollectionView object is initialized to show 10 items 
            per page. You can customize it in the text box. We add navigation buttons, and
            call IPagedCollectionView methods in the button click event. Note that we use the 
            <strong>pageIndex</strong> and <strong>pageCount</strong> properties to show 
            the current page and total number of pages. You can customize the page size in 
            the first text box. Leave it empty or set it to 0 to disable paging and hide
            the navigation buttons.</p>
        <div class="row" ng-controller="appPagingCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appPagingCtrl"&gt;
  &lt;div class="row-fluid well row"&gt;
    &lt;div class="col-md-5"&gt;
      &lt;input 
          number-input 
          type="text" 
          class="form-control" 
          placeholder="0 or empty is for no paging." 
          ng-model="cvPaging.pageSize" /&gt;
    &lt;/div&gt;
    &lt;div class="btn-group col-md-7" ng-show="cvPaging.pageSize &gt; 0"&gt;
      &lt;button type="button" class="btn btn-default"
          ng-disabled="cvPaging.pageIndex &lt;= 0"
          ng-click="cvPaging.moveToFirstPage()"&gt;
        &lt;span class="glyphicon glyphicon-fast-backward"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default"
          ng-disabled="cvPaging.pageIndex &lt;= 0"
          ng-click="cvPaging.moveToPreviousPage()"&gt;
        &lt;span class="glyphicon glyphicon-step-backward"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;button 
          type="button" 
          class="btn btn-default" 
          disabled style="width:100px" &gt;
          {&#8203;{cvPaging.pageIndex + 1 | number}} 
          / {&#8203;{cvPaging.pageCount | number}}
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default"
          ng-disabled="cvPaging.pageIndex &gt;= cvPaging.pageCount - 1"
          ng-click="cvPaging.moveToNextPage()"&gt;
        &lt;span class="glyphicon glyphicon-step-forward"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default"
          ng-disabled="cvPaging.pageIndex &gt;= cvPaging.pageCount - 1"
          ng-click="cvPaging.moveToLastPage()"&gt;
        &lt;span class="glyphicon glyphicon-fast-forward"&gt;&lt;/span&gt;
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="sGrid"&gt;
    &lt;table class="table table-condensed table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr class="active"&gt;
          &lt;th class="text-center" ng-repeat="fieldName in fieldNames"&gt;
              {&#8203;{fieldName}}&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr ng-repeat="item in cvPaging.items"&gt;
          &lt;td class="text-center" ng-repeat="name in fieldNames"&gt;
              {&#8203;{item[name] | globalize}}&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for paging */
var app = angular.module('app');
app.controller('appPagingCtrl', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(55));

  // initialize the page size with 10.
  cv.pageSize = 10;

  // initialize the scope data.
  $scope.cvPaging = cv;
  $scope.fieldNames = dataSvc.getNames();
});
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <div class="row-fluid well row">
                        <div class="col-md-5">
                            <input number-input type="text" class="form-control" placeholder="0 or empty is for no paging." ng-model="cvPaging.pageSize" />
                        </div>
                        <div class="btn-group col-md-7" ng-show="cvPaging.pageSize > 0">
                            <button type="button" class="btn btn-default"
                                ng-disabled="cvPaging.pageIndex <= 0"
                                ng-click="cvPaging.moveToFirstPage()">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default"
                                ng-disabled="cvPaging.pageIndex <= 0"
                                ng-click="cvPaging.moveToPreviousPage()">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default" disabled style="width:100px" >
                                {{cvPaging.pageIndex + 1 | number}} 
                                / {{cvPaging.pageCount | number}}
                            </button>
                            <button type="button" class="btn btn-default"
                                ng-disabled="cvPaging.pageIndex >= cvPaging.pageCount - 1"
                                ng-click="cvPaging.moveToNextPage()">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default"
                                ng-disabled="cvPaging.pageIndex >= cvPaging.pageCount - 1"
                                ng-click="cvPaging.moveToLastPage()">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                </div>
                <div class="sGrid">
                    <table class="table table-condensed table-bordered">
                        <thead>
                            <tr class="active">
                                <th class="text-center" ng-repeat="fieldName in fieldNames">{{fieldName}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in cvPaging.items">
                                <td class="text-center" ng-repeat="name in fieldNames">{{item[name] | globalize}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- tracking changes -->
        <h2>Tracking changes</h2>
        <p>
            The <b>CollectionView</b> class can keep track of changes made to the
            data. This is useful in situations where you must submit changes
            to the server. To turn on change tracking, set the <b>trackChanges</b>
            property to true. Once you do that, the <b>CollectionView</b> keeps
            track of any changes made to the data and exposes them in three
            arrays:</p>
        <ul>
            <li><b>itemsEdited</b>: This list contains items that are edited using
                the <b>beginEdit</b> and <b>commitEdit</b> methods.</li>
            <li><b>itemsAdded</b>: This list contains items that are added using the
                <b>addNew</b> and <b>commitNew</b> methods.</li>
            <li><b>itemsRemoved</b>: This list contains items that are removed using
                the <b>remove</b> method.</li>
        </ul>
        <p>
            This feature is demonstrated below using a <b>FlexGrid</b>. The grid is bound
            to a <b>CollectionView</b> with <b>trackChanges</b> set to true.</p>
        <div class="row" ng-controller="appTCCtrl">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appTCCtrl"&gt;
  &lt;h5&gt;Change the data here&lt;/h5&gt;
  &lt;wj-flex-grid class="sGrid"
      items-source="cvTrackingChanges"
      allow-add-new="true"
      allow-delete="true"&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h5&gt;See the changes here&lt;/h5&gt;
  &lt;h6&gt;Items edited:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsEdited"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h6&gt;Items added:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsAdded"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h6&gt;Items removed:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsRemoved"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for tracking changes */
var app = angular.module('app');
app.controller('appTCCtrl', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(6));

  //track the changes
  cv.trackChanges = true;

  // initialize the scope data.
  $scope.cvTrackingChanges = cv;
});
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="CSS">
                        <div class="pane-content">
/* set default grid height and some shadow */
.sGrid {
  background-color: #fff;
  box-shadow: 4px 4px 10px 0 rgba(50, 50, 50, 0.75);
  height: 300px;
  margin-bottom: 12px;
  overflow: auto;
}

/* set the record grids height and some shadow */
.tcGrid {
  background-color: #fff;
  box-shadow: 4px 4px 10px 0 rgba(50, 50, 50, 0.75);
  height: 100px;
  margin-bottom: 12px;
  overflow: auto;
}
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <h5>Change the data here</h5>
                <wj-flex-grid class="sGrid"
                    items-source="cvTrackingChanges"
                    allow-add-new="true"
                    allow-delete="true">
                </wj-flex-grid>
                <h5>See the changes here</h5>
                <h6>Items edited:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsEdited"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
                <h6>Items added:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsAdded"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
                <h6>Items removed:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsRemoved"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
            </div>
        </div>

        <!-- tracking changes extra -->
        <h2>Tracking changes with Customization</h2>
        <p>
            When you edit an item on a <b>CollectionView</b> with change tracking on, the
            item is added to the <b>itemdEdited</b> collection. However, the
            <b>CollectionView</b> doesn't keep track of the item's original values, so
            if you later edit it again and restore the original values, the item will
            remain in the <b>itemdEdited</b> collection.</p>
        <p>
            But you can change that behavior if you want. This example uses the events 
            exposed by the <b>CollectionView</b> and <b>itemsChanged</b> classes to keep 
            track if the original values for each item, and to remove items from the 
            <b>itemsEdited</b> collection if the user restores the original values.</p>
        <div class="row" ng-controller="appTCCtrlX">
            <div class="col-md-6">
                <app-tab>
                    <app-tab-pane title="HTML">
                        <div class="pane-content">
&lt;div ng-controller="appTCCtrlX"&gt;
  &lt;h5&gt;Change the data here&lt;/h5&gt;
  &lt;wj-flex-grid class="sGrid"
      items-source="cvTrackingChanges"
      allow-add-new="true"
      allow-delete="true"&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h5&gt;See the changes here&lt;/h5&gt;
  &lt;h6&gt;Items edited:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsEdited"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h6&gt;Items added:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsAdded"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;

  &lt;h6&gt;Items removed:&lt;/h6&gt;
  &lt;wj-flex-grid class="tcGrid"
      style="background:#eeeeff"
      items-source="cvTrackingChanges.itemsRemoved"
      is-read-only="true"&gt;
    &lt;wj-flex-grid-column binding="id" header="id" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="start" header="start"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="end" header="end"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="country" header="country"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="product" header="product"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="color" header="color"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="amount" header="amount" data-type="Number"&gt;
        &lt;/wj-flex-grid-column&gt;
    &lt;wj-flex-grid-column binding="active" header="active" data-type="Boolean"&gt;
        &lt;/wj-flex-grid-column&gt;
  &lt;/wj-flex-grid&gt;
&lt;/div&gt;
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="JS">
                        <div class="pane-content">
/* define the controller for tracking changes with extra/custom tracking */
var app = angular.module('app');
app.controller('appTCCtrlX', function ($scope, dataSvc) {

  // initialize the collectionview
  var cv = new wijmo.collections.CollectionView(dataSvc.getData(6));

  //track the changes
  cv.trackChanges = true;

  // initialize the scope data.
  $scope.cvTrackingChanges = cv;

  // keep the original state of the current item
  var current = cv.currentItem ? JSON.stringify(cv.currentItem) : null;
  cv.currentChanged.addHandler(function (s, e) {
    current = s.currentItem ? JSON.stringify(s.currentItem) : null;
  });

  // keep track of the original state of edited items
  var original = [];
  cv.itemsEdited.collectionChanged.addHandler(function (s, e) {
    if (e.action == wijmo.collections.NotifyCollectionChangedAction.Add ||
        e.action == wijmo.collections.NotifyCollectionChangedAction.Change) {

      // check if we have this item's original data
      var index = cv.sourceCollection.indexOf(e.item);
      var found = -1;
      for (var i = 0; i &lt; original.length && found &lt; 0; i++) {
        if (original[i].index == index) {
          found = i;
        }
      }

      // if we have the item, check original value
      if (found > -1) {

        // if the current value is the same as the original, remove
        var valueNow = JSON.stringify(e.item);
        if (valueNow == original[found].value) {
          original.splice(found, 1);
          index = cv.itemsEdited.indexOf(e.item);
          cv.itemsEdited.splice(index, 1);
        }
      } else { // if we don't, store it now
        found = original.length;
        original.push({ index: index, value: current });
      }
    }
  });
});
                        </div>
                    </app-tab-pane>
                    <app-tab-pane title="CSS">
                        <div class="pane-content">
/* set default grid height and some shadow */
.sGrid {
  background-color: #fff;
  box-shadow: 4px 4px 10px 0 rgba(50, 50, 50, 0.75);
  height: 300px;
  margin-bottom: 12px;
  overflow: auto;
}

/* set the record grids height and some shadow */
.tcGrid {
  background-color: #fff;
  box-shadow: 4px 4px 10px 0 rgba(50, 50, 50, 0.75);
  height: 100px;
  margin-bottom: 12px;
  overflow: auto;
}
                        </div>
                    </app-tab-pane>
                </app-tab>
            </div>
            <div class="col-md-6">
                <h4>Result (live):</h4>
                <h5>Change the data here</h5>
                <wj-flex-grid class="sGrid"
                    items-source="cvTrackingChanges"
                    allow-add-new="true"
                    allow-delete="true">
                </wj-flex-grid>
                <h5>See the changes here</h5>
                <h6>Items edited:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsEdited"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
                <h6>Items added:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsAdded"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
                <h6>Items removed:</h6>
                <wj-flex-grid class="tcGrid"
                    style="background:#eeeeff"
                    items-source="cvTrackingChanges.itemsRemoved"
                    is-read-only="true">
                    <wj-flex-grid-column binding="id" header="id" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="start" header="start"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="end" header="end"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="country" header="country"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="product" header="product"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="color" header="color"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="amount" header="amount" data-type="Number"></wj-flex-grid-column>
                    <wj-flex-grid-column binding="active" header="active" data-type="Boolean"></wj-flex-grid-column>
                </wj-flex-grid>
            </div>
        </div>

        <!-- sample controller scripts -->
        <script src="scripts/controllers/gettingStarted.js" type="text/javascript"></script>
        <script src="scripts/controllers/curRecordManage.js" type="text/javascript"></script>
        <script src="scripts/controllers/sorting.js" type="text/javascript"></script>
        <script src="scripts/controllers/filtering.js" type="text/javascript"></script>
        <script src="scripts/controllers/grouping.js" type="text/javascript"></script>
        <script src="scripts/controllers/editing.js" type="text/javascript"></script>
        <script src="scripts/controllers/paging.js" type="text/javascript"></script>
        <script src="scripts/controllers/trackingChanges.js" type="text/javascript"></script>
        <script src="scripts/controllers/trackingChangesExtra.js" type="text/javascript"></script>
    </div>

    <!-- Google analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-208280-14', 'auto');
        ga('send', 'pageview');
    </script>
</body>
</html>
