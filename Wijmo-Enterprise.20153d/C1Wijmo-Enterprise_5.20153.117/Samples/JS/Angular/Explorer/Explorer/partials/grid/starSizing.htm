<div>
	<div class="copy">
		<h3>
			Star Sizing</h3>
		<p>
			This sample shows how you can use XAML-style star sizing to implement flexible layouts
			with the <a href="http://wijmo.com/5/docs/topic/wijmo.grid.FlexGrid.Class.html" 
            target="_blank">FlexGrid</a>. Star sizing is specified in the width property of the 
            <a href="http://wijmo.com/5/docs/topic/wijmo.grid.Column.Class.html" target="_blank">Column</a> 
            object.</p>

		<div class="collapsed-content collapse">
			<p>
				Star sizing is similar to percentage sizing, except that the values do not have to add up
				to one hundred. A width of '3*' means 'three times wider than 1*.' The total size
				used to calculate the layout is the current width of the control minus the width
				of any non-star columns divided by the number of stars specified.</p>
			<p>
				You can use star-sizing to implement grids where the last column expands to fill all of
				the available space. To do this, simply set the width of the last colunm to *. You
				might also want to set the minWidth property of the last column to prevent it from getting 
				too narrow.</p>
            <p>
                Note that the minWidth and maxWidth properties of columns also affect the layout calculations.
                You can resize the entire grid in each sample by resizing the window.</p>
        <p>
            These samples use the 
            <a href="http://wijmo.com/5/docs/topic/wijmo.angular.WjFlexGrid.Class.html" 
            target="_blank">WjFlexGrid</a> and 
            <a href="http://wijmo.com/5/docs/topic/wijmo.angular.WjFlexGridColumn.Class.html" 
            target="_blank">WjFlexGridColumn</a> directives and AngularJS.</p>
		</div>
		<p>
			<button type="button" data-toggle="collapse"
					data-target=".collapsed-content, .btn.btn-default.btn-xs.collapse"
					class="btn btn-default btn-xs collapse in">
				Read more</button>
		</p>

	</div>

	<h4>
		Example 1:</h4>
	<p>
		This grid has four columns. The first is 80 pixels wide and can be resized between
		40 and 160 pixels. The other three have widths of 2*, *, and *, and cannot be
		resized using the mouse. </p>
	<p>
		Notice that the second column is twice as wide as the third and fourth columns, and that
		they keep these proportions even as you resize the first column or the whole grid.</p>

	<wj-flex-grid class="grid" items-source="ctx.data">
		<wj-flex-grid-column header="Date" binding="start" width="80" min-width="40" max-width="160"></wj-flex-grid-column>
		<wj-flex-grid-column header="Product" binding="product" width="2*" allow-resizing="false"></wj-flex-grid-column>
		<wj-flex-grid-column header="Revenue" binding="amount" format="n0" width="*" allow-resizing="false"></wj-flex-grid-column>
		<wj-flex-grid-column header="Expense" binding="amount2" format="n0" width="*" allow-resizing="false"></wj-flex-grid-column>
	</wj-flex-grid>
	<br />
	<br />
	<h4>
		Example 2:</h4>
	<p>
		This grid shows how you can make any column stretch to fill the available space. In this case,
		we set the width of the second column to * to achieve that effect.</p>
	<p>
		We also set the minimum width of the second column to 100 pixels in order to prevent it from
		getting too narrow when the other columns in the grid are resized, and we prevent users from 
        resizing this column with the mouse.</p>

	<wj-flex-grid class="grid" items-source="ctx.data">
		<wj-flex-grid-column header="Date" binding="start" width="80"></wj-flex-grid-column>
		<wj-flex-grid-column header="Product" binding="product" width="*" min-width="100" allow-resizing="false"></wj-flex-grid-column>
		<wj-flex-grid-column header="Revenue" binding="amount" format="n0" width="120"></wj-flex-grid-column>
	</wj-flex-grid>
	<br />
	<br />
	<h4>
		Example 3:</h4>
	<p>
		This example sets all widths to *, which means the space available is divided equally among them.
		Resize the browser and notice how the grid resizes and the columns fill it up equally. </p>
    <p>
        Also, unlike the other examples, this one sets the allowResizing property of the entire grid rather 
        than an individual column. We set this one to None, but you may also choose Columns, Rows, or Both.</p>
	<wj-flex-grid class="grid" allow-resizing="None" items-source="ctx.data">
		<wj-flex-grid-column header="Date" binding="start" width="*"></wj-flex-grid-column>
		<wj-flex-grid-column header="Product" binding="product" width="*" min-width="100"></wj-flex-grid-column>
		<wj-flex-grid-column header="Revenue" binding="amount" format="n0" width="*"></wj-flex-grid-column>
		<wj-flex-grid-column header="Expense" binding="amount2" format="n0" width="*"></wj-flex-grid-column>
	</wj-flex-grid>
</div>
