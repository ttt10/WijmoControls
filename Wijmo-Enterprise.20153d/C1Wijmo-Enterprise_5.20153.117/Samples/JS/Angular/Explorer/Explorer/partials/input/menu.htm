<div>
    <div class="copy">
        <h3>
            Menu</h3>
        <p>
            The <a href="http://wijmo.com/5/docs/topic/wijmo.input.Menu.Class.html" 
            target="_blank">Menu</a> control extends the 
            <a href="http://wijmo.com/5/docs/topic/wijmo.input.ComboBox.Class.html" 
            target="_blank">ComboBox</a> control to provide a simple drop-down list with 
            clickable items.</p>
        <p>
            The <b>header</b> property determines the text shown on the menu, and the 
            <b>itemsSource</b> property defines the items shown in the drop-down, the 
            same as it does in the ComboBox.</p>
        <p>
            The Menu control provides three methods for handling user choices: you can
            handle the <b>itemClicked</b> event, attach a command to each menu choice, 
            or bind the <b>selectedValue</b> property and use it as a simple value picker.
            See each method demonstrated below.</p>
        <p>
            These samples use the <a href="http://wijmo.com/5/docs/topic/wijmo.angular.WjMenu.Class.html" 
            target="_blank">WjMenu</a> directive and AngularJS.</p>
    </div>

    <h4>
        Handling choices with the itemClicked event</h4>
    <p>
        When the user selects an item from the menu, the control raises the <b>itemClicked</b>
        event. You can handle this event to inspect the menu's <b>selectedIndex</b>
        property to determine which item was clicked and take an appropriate action.</p>
    <p>
        The three menus below use this method to call a <b>menuItemClicked</b> method in the
        controller. The method inspects the selected item and displays an alert.</p>

    <div>
        <wj-menu header="File" item-clicked="menuItemClicked(s, e)">
            <wj-menu-item><b>New</b><br />
                <span class=menuTip>create a new document</span></wj-menu-item>
            <wj-menu-item><b>Open</b><br />
                <span class=menuTip>load an existing document from a file</span></wj-menu-item>
            <wj-menu-item><b>Save</b><br />
                <span class=menuTip>save the current document to a file</span></wj-menu-item>
            <wj-menu-separator></wj-menu-separator>
            <wj-menu-item><b>Exit</b><br />
                <span class=menuTip>save changes and exit the application</span></wj-menu-item>
        </wj-menu>
        <wj-menu header="Edit" item-clicked="menuItemClicked(s, e)">
            <wj-menu-item><b>Cut</b><br />
                <span class=menuTip>move the current selection to the clipboard</span></wj-menu-item>
            <wj-menu-item><b>Copy</b><br />
                <span class=menuTip>copy the current selection to the clipboard</span></wj-menu-item>
            <wj-menu-item><b>Paste</b><br />
                <span class=menuTip>insert the clipboard content at the cursor position</span></wj-menu-item>
            <wj-menu-separator></wj-menu-separator>
            <wj-menu-item><b>Find</b><br />
                <span class=menuTip>search the current document for some text</span></wj-menu-item>
            <wj-menu-item><b>Replace</b><br />
                <span class=menuTip>replace occurrences of a string in the current document</span></wj-menu-item>
        </wj-menu>
        <wj-menu header="Format" item-clicked="menuItemClicked(s, e)">
            <wj-menu-item><b>Bold</b></wj-menu-item>
            <wj-menu-item><i>Italic</i></wj-menu-item>
            <wj-menu-item><u>Underline</u></wj-menu-item>
            <wj-menu-separator></wj-menu-separator>
            <wj-menu-item><span style=background-color:red>&nbsp;&nbsp;&nbsp;</span>&nbsp;Red</wj-menu-item>
            <wj-menu-item><span style=background-color:green>&nbsp;&nbsp;&nbsp;</span>&nbsp;Green</wj-menu-item>
            <wj-menu-item><span style=background-color:blue>&nbsp;&nbsp;&nbsp;</span>&nbsp;Blue</wj-menu-item>
        </wj-menu>
    </div>

    <br />
    <h4>
        Handling choices with item commands</h4>
    <p>
        The Menu control also supports commands, which makes it easier to use the
        MVVM pattern. Commands are objects that implement two methods:</p>
    <ul>
        <li>
            <b>executeCommand(parameter)</b> This method executes the command.</li>
        <li>
            <b>canExecuteCommand(parameter)</b> This method returns a Boolean value
            that determines whether the controller can execute the command.
            If this method returns false, the menu option is disabled.
        </li>
    </ul>
    <p>
        The menu below has items bound to a command in the controller. We 
        implement the command as follows:</p>
<pre>$scope.changeValueCommand = {
  executeCommand: function (parm) {
    if (wijmo.isNumber(parm)) {
      $scope.ctx.passengers += parm;
    } else {
      $scope.ctx.passengers = 1; // reset
    }
    $scope.$apply('ctx.passengers');
  },
  canExecuteCommand: function (parm) {
    if (wijmo.isNumber(parm)) {
      var val = $scope.ctx.passengers + parm;
      return val >= 0 && val <= 100;
    }
    return true;
  }
}</pre>
    <p>
        The <b>executeCommand</b> method increments a variable in the model 
        by an amount passed in as a parameter. The use of parameters makes 
        commands flexible, so that menu options that increment or decrement 
        the variable by different amounts can use the same command.</p>
    <p>
        The <b>canExecuteCommand</b> method checks whether adding the specified 
        amount to the variable would violate the range constraint (the variable 
        is supposed to be between zero and 100). If the command is invalid, the 
        corresponding menu options become disabled.</p>
    <p>
        This is a typical MVVM-style implementation. The logic stays in the 
        controller, and the view determines which elements invoke the command, 
        and with which parameters.</p>

    <dl class="dl-horizontal">
        <dt>Value (0 to 100)</dt>
        <dd>
            <wj-input-number
                value="ctx.passengers"
                min="0"
                max="100"
                step="1"
                format="n0">
            </wj-input-number>
            <br />
        </dd>
        <dt>Change value</dt>
        <dd>
            <wj-menu header="Select Increment">
                <wj-menu-item cmd="changeValueCommand" cmd-param="50">Increment by 50</wj-menu-item>
                <wj-menu-item cmd="changeValueCommand" cmd-param="10">Increment by 10</wj-menu-item>
                <wj-menu-item cmd="changeValueCommand" cmd-param="5">Increment by 5</wj-menu-item>
                <wj-menu-separator></wj-menu-separator>
                <wj-menu-item cmd="changeValueCommand" cmd-param="-5">Decrement by 5</wj-menu-item>
                <wj-menu-item cmd="changeValueCommand" cmd-param="-10">Decrement by 10</wj-menu-item>
                <wj-menu-item cmd="changeValueCommand" cmd-param="-50">Decrement by 50</wj-menu-item>
                <wj-menu-separator></wj-menu-separator>
                <wj-menu-item cmd="changeValueCommand"><b>Reset</b></wj-menu-item>
            </wj-menu>
            <br />
        </dd>
    </dl>

    <br />
    <br />
    <h4>
        Binding menu options to values (ValuePicker)</h4>
    <p>
        The Menu control can also be used as a simple value picker. It extends the ComboBox
        control, which allows you to bind scope variables to the control's <b>selectedValue</b> 
        property as you would with a ComboBox.</p>
    <p>
        The menu below allows users to pick a sales tax value from a pre-defined list. The 
        markup is as follows:</p>
    <pre>&lt;wj-menu header="Tax" value="ctx.tax"&gt;
  &lt;wj-menu-item value="0"&gt;Exempt&lt;/wj-menu-item&gt;
  &lt;wj-menu-item value=".05"&gt;5%&lt;/wj-menu-item&gt;
  ...
  &lt;wj-menu-item value=".15"&gt;15%&lt;/wj-menu-item&gt;
  &lt;/wj-menu&gt;</pre>
    <wj-menu header="Tax" value="ctx.tax">
        <wj-menu-item value="0">Exempt</wj-menu-item>
        <wj-menu-item value=".05">5%</wj-menu-item>
        <wj-menu-item value=".085">8.5%</wj-menu-item>
        <wj-menu-item value=".09">9%</wj-menu-item>
        <wj-menu-item value=".1">10%</wj-menu-item>
        <wj-menu-item value=".12">12%</wj-menu-item>
        <wj-menu-item value=".15">15%</wj-menu-item>
    </wj-menu>

    <br />
    <br />
    <h4>
        Using menus as buttons (SplitButton)</h4>
    <p>
        Split Buttons allow users to select a value by clicking a primary button,
        or select from a list of mutually exclusive values displayed in a drop-down 
        list.</p>
    <p>
        To use Wijmo menu controls as split buttons, all you have to do is set the
        <b>isButton</b> property to true. Once you do that, clicking the menu header
        will raise the <b>itemClicked</b> event instead of showing the drop-down
        list of commands. Of course, users can still open the drop-down by clicking 
        the drop-down button next to the menu header.</p>
    <p>
        The menu below was configured to act as a split button. The markup is as 
        follows:</p>
<pre>&lt;wj-menu header="Run" value="ctx.browser" is-button="true" item-clicked="splitButtonItemClicked(s, e)"&gt;
  &lt;wj-menu-item value="'IE'"&gt;Internet Explorer&lt;/wj-menu-item&gt;
  &lt;wj-menu-item value="'Chrome'"&gt;Chrome&lt;/wj-menu-item&gt;
  &lt;wj-menu-item value="'FF'"&gt;FireFox&lt;/wj-menu-item&gt;
  &lt;wj-menu-item value="'Safari'"&gt;Safari&lt;/wj-menu-item&gt;
  &lt;wj-menu-item value="'Opera'"&gt;Opera&lt;/wj-menu-item&gt;
&lt;/wj-menu&gt;</pre>
    <br />
    <p>
        In most cases, the handler for the menu's <b>menuItemClicked</b> event will 
        perform the same action regardless of whether the user clicked the button or
        selected an item from the drop-down list. But that is not always the case. 
        In this example, we decided to change the default browser when users
        select items from the drop-down list, and to run the selected browser when users
        click the button. This was done by checking the value of the menu's 
        <b>isDroppedDown</b> property in the <b>menuItemClicked</b> event handler:</p>
<pre>// handle clicks on the split button
// uses the isDroppedDown property to check whether the event was triggered
// by selecting an item from the drop-down or by clicking the button
$scope.splitButtonItemClicked = function (sender, args) {
  var menu = sender;
  if (menu.isDroppedDown) {

    // the click was on a menu item
    alert('option **' + menu.selectedItem.value + '** is now the default');

  } else {

    // the click was on the button
    alert('running **' + menu.selectedItem.value) + '**';
  }
}</pre>
    <br />
        <wj-menu header="Run" value="ctx.browser" is-button="true" item-clicked="splitButtonItemClicked(s, e)">
            <wj-menu-item value="'IE'">Internet Explorer</wj-menu-item>
            <wj-menu-item value="'Chrome'">Chrome</wj-menu-item>
            <wj-menu-item value="'FF'">FireFox</wj-menu-item>
            <wj-menu-item value="'Safari'">Safari</wj-menu-item>
            <wj-menu-item value="'Opera'">Opera</wj-menu-item>
        </wj-menu>

    <br />
    <br />
    <h4>
        Context Menus</h4>
    <p>
        Context menus (also called contextual, shortcut, and popup or pop-up menu)
        are menus that appear upon user interaction, typically a right-click, and
        display commands that apply to the object that was clicked.</p>
    <p>
        You can use any regular Wijmo Menu as a context menu by following these
        steps:</p>
    <ol>
        <li>
            Define the menu using the regular markup as shown above, and
            give the menu element an id.</li>
        <li>
            Hide the menu by adding an "ng-hide" attribute to it or by
            setting its visibility property to "hidden".</li>
        <li>
            Add the "wj-context-menu" attribute to the elements that should
            receive the context menu, and set its value to the id of the
            element that defines the original menu (e.g. '#ctxMenu').</li>
    </ol>

    <p>
        For example, the three elements below share a common context menu:</p>
    <div>
        <div id="element1" wj-context-menu="#ctxMenu" style="float:left;margin:20px;padding:20px;background:#f0a0a0">
            I have a Context Menu.
        </div>
        <div id="element2" wj-context-menu="#ctxMenu" style="float:left;margin:20px;padding:20px;background:#a0f0a0">
            I have the same Context Menu.
        </div>
        <div id="element3" wj-context-menu="#ctxMenu" style="float:left;margin:20px;padding:20px;background:#a0a0f0">
            You guessed it, me too.
        </div>
    </div>

    <!-- the context menu: a regular menu, except hidden and with an id -->
    <wj-menu 
        id="ctxMenu" 
        ng-hide="true" 
        header="Context Menu" 
        item-clicked="menuItemClicked(s, e)">
        <wj-menu-item><b>Cut</b><br />
            <span class=menuTip>Moves the current selection to the clipboard.</span></wj-menu-item>
        <wj-menu-item><b>Copy</b><br />
            <span class=menuTip>Copies the current selection to the clipboard.</span></wj-menu-item>
        <wj-menu-item><b>Paste</b><br />
            <span class=menuTip>Inserts the clipboard content at the cursor position.</span></wj-menu-item>
        <wj-menu-separator></wj-menu-separator>
        <wj-menu-item><b>Find</b><br />
            <span class=menuTip>Searches for the text in the current document.</span></wj-menu-item>
        <wj-menu-item><b>Replace</b><br />
            <span class=menuTip>Replaces occurances of the specified string in the current document.</span></wj-menu-item>
    </wj-menu>

    <div style="clear:both"></div>
    <br />
    <br />
    <h4>
        Menu item content with expressions and directives</h4>
        <p>
        The <b>wj-menu-item</b> directive may contain arbitrary HTML
         fragment, AngularJS interpolation expressions and directives. 
         You can also use <b>ng-repeat</b> and <b>ng-if</b> directives
        to populate the items in the Menu control.</p>

        <wj-menu 
            header="Palette" 
            value="thePalette"
            max-drop-down-height="300">
            <wj-menu-item ng-repeat="palette in palettes.items" value="palette.name">
                {{palette.name}}
                <span style="float:right">
                    <div 
                        ng-repeat="color in palette.colors track by $index" 
                        style="display:inline;padding:2px;height:10px;width:3px"
                        ng-style="{'background-color':color}">
                    </div>
                </span>
            </wj-menu-item>
        </wj-menu>

    <br />
    <br />
    <h4>
        Data bound Menu with item template</h4>
    <p>
        The <b>wj-item-template</b> directive can be used to add a template in a data-bound Menu control.
        The template may contain an arbitrary HTML fragment with AngularJS bindings and directives.</p>
        <wj-menu 
            header="Artists" 
            item-clicked="menuItemClicked(s, e)"
            items-source="ctx.musicians"
            max-drop-down-height="300">
            <wj-item-template>
                <div style="min-width: 160px">
                {{$itemIndex + 1}}. <b>{{$item.name}}</b>
                <div ng-if="$item.photo">
                    <img ng-src="{{$item.photo}}" height="50" />
                </div>
                </div>
            </wj-item-template>
        </wj-menu>

</div>
